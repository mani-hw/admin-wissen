{"version":3,"file":"static/js/793.2a46b0c8.chunk.js","mappings":"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","sources":["ui-component/cards/AuthFooter.js","views/Quizzes/quizform.js","views/Quizzes/createQuiz.js","views/pages/authentication/AuthCardWrapper.js","views/pages/authentication/AuthWrapper1.js"],"sourcesContent":["// material-ui\nimport { Stack } from '@mui/material';\n\n// ==============================|| FOOTER - AUTHENTICATION 2 & 3 ||============================== //\n\nconst AuthFooter = () => (\n    <Stack direction=\"row\" justifyContent=\"space-between\">\n        {/* <Typography variant=\"subtitle2\" component={Link} href=\"https://berrydashboard.io\" target=\"_blank\" underline=\"hover\">\n            berrydashboard.io\n        </Typography>\n        <Typography variant=\"subtitle2\" component={Link} href=\"https://codedthemes.com\" target=\"_blank\" underline=\"hover\">\n            &copy; codedthemes.com\n        </Typography> */}\n    </Stack>\n);\n\nexport default AuthFooter;\n","import {\n    Button,\n    Grid,\n    TextField,\n    CircularProgress,\n    Autocomplete,\n    useMediaQuery,\n    useTheme,\n    InputLabel,\n    Select,\n    FormControl,\n    MenuItem,\n    OutlinedInput\n} from '@mui/material';\nimport { Controller, useForm } from 'react-hook-form';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport React, { useEffect, useState } from 'react';\nimport firebase from '../../frebase/firebase';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { getDownloadURL, ref as storageReference, uploadBytes, getStorage } from 'firebase/storage';\nimport moment from 'moment';\n\nconst QuizForm = ({ ...others }) => {\n    const [loading, setLoading] = useState(false);\n    const [genreError, setGenreError] = useState(false);\n    const [topics, setTopics] = useState([]);\n    const [topic, setTopic] = useState([]);\n    const [coverImageError, setCoverImageError] = useState(false);\n    const [type, setType] = useState('');\n    const [coverImage, setCoverImage] = useState(null);\n    const [typeError, setTypeError] = useState(false);\n    const navigate = useNavigate();\n    const theme = useTheme();\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n    const [searchParams] = useSearchParams();\n    const queryParamsLeagues = searchParams.get('league');\n    const ref = firebase.firestore().collection('Users');\n    const {\n        handleSubmit,\n        formState: { errors },\n        control\n    } = useForm({\n        mode: 'all'\n    });\n\n    const getTopics = async () => {\n        try {\n            const config = (await firebase.firestore().collection('Config').get()).docs.map((doc) => doc.data());\n            const topics = config[1].Topics;\n            setTopics(topics.map((topic) => ({ label: topic.name, value: topic.name })));\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        getTopics();\n    }, []);\n\n    const onSubmit = async (quizData) => {\n        try {\n            if (topic.length === 0) {\n                setGenreError(true);\n                return;\n            }\n            if (coverImage === null) {\n                setCoverImageError(true);\n                return;\n            }\n            if (type.length === 0) {\n                setTypeError(true);\n                return;\n            }\n            setLoading(true);\n            const id = moment().valueOf();\n            quizData.genre = topic.map((val) => val.label);\n            quizData.id = id.toString();\n            quizData.createdAt = moment().valueOf();\n            quizData.type = type;\n            const storageRef = storageReference(getStorage(), `/Quizzes/${coverImage.name}`);\n            const imgSnapshot = await uploadBytes(storageRef, coverImage);\n            const url = await getDownloadURL(imgSnapshot.ref);\n            quizData.Img = url;\n            if (queryParamsLeagues) {\n                await firebase.firestore().collection('Quizzes').doc(id.toString()).set(quizData);\n                await firebase\n                    .firestore()\n                    .collection('QuizLeague')\n                    .doc(queryParamsLeagues)\n                    .update({ quizzes: firebase.firestore.FieldValue.arrayUnion(id.toString()) }, { merge: true });\n            } else {\n                await firebase.firestore().collection('Quizzes').doc(id.toString()).set(quizData);\n            }\n            setLoading(false);\n            navigate(`/allquestions?quiz=${id.toString()}`);\n        } catch (error) {\n            setLoading(false);\n            console.log(error);\n        }\n    };\n\n    return (\n        <>\n            <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}></Grid>\n            {loading ? (\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>\n                    <CircularProgress />\n                </div>\n            ) : (\n                <form noValidate onSubmit={handleSubmit(onSubmit)} {...others}>\n                    <Grid container spacing={matchDownSM ? 0 : 2}>\n                        <Grid item xs={12} sm={6}>\n                            <Controller\n                                name=\"title\"\n                                control={control}\n                                rules={{\n                                    required: 'Title is required.',\n                                    minLength: {\n                                        value: 5,\n                                        message: 'Title should be min 5 letter'\n                                    }\n                                }}\n                                render={({ field }) => <TextField fullWidth label=\"Quiz Title\" margin=\"normal\" {...field} />}\n                            />\n                            {errors.title && <span style={{ color: 'red' }}>{errors.title.message}</span>}\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Controller\n                                name=\"detail\"\n                                control={control}\n                                rules={{\n                                    required: 'Description is required',\n                                    minLength: {\n                                        value: 5,\n                                        message: 'Description should be min 5 letter'\n                                    }\n                                }}\n                                render={({ field }) => <TextField fullWidth label=\"Quiz Description\" margin=\"normal\" {...field} />}\n                            />\n                            {errors.detail && <span style={{ color: 'red' }}>{errors.detail.message}</span>}\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={matchDownSM ? 0 : 2}>\n                        <Grid item xs={12} sm={6}>\n                            <Controller\n                                name=\"Rules\"\n                                control={control}\n                                rules={{\n                                    required: 'Rules is required',\n                                    minLength: {\n                                        value: 5,\n                                        message: 'Rules should be min 5 letter'\n                                    }\n                                }}\n                                render={({ field }) => <TextField fullWidth label=\"Quiz Rules\" margin=\"normal\" {...field} />}\n                            />\n\n                            {errors.Rules && <span style={{ color: 'red' }}>{errors.Rules.message}</span>}\n                        </Grid>\n                        <Grid item sm={6} xs={12} sx={{ marginTop: '15px' }}>\n                            <Button\n                                component=\"label\"\n                                variant=\"outlined\"\n                                size=\"large\"\n                                sx={{ borderRadius: '10px', height: '52px' }}\n                                fullWidth\n                            >\n                                Upload Cover Image\n                                <input hidden accept=\"image/*\" type=\"file\" onChange={(e) => setCoverImage(e.target.files[0])} />\n                            </Button>\n\n                            {coverImageError && <span style={{ color: 'red' }}>Cover image is required.</span>}\n                        </Grid>\n                        {coverImage ? (\n                            <Grid item sm={12} xs={12} md={12} sx={{ marginTop: '15px' }}>\n                                <div>\n                                    <img style={{ height: 150, width: '100%' }} alt=\"cover\" src={URL.createObjectURL(coverImage)} />\n                                </div>\n                            </Grid>\n                        ) : (\n                            <div></div>\n                        )}\n                    </Grid>\n\n                    <Grid container spacing={matchDownSM ? 0 : 2}>\n                        <Grid item sm={12}>\n                            <Autocomplete\n                                disablePortal\n                                id=\"combo-box-demo\"\n                                multiple\n                                value={topic}\n                                options={topics}\n                                onChange={(e, val) => {\n                                    if (val === null) {\n                                        setTopic([]);\n                                    } else {\n                                        setTopic(val);\n                                    }\n                                }}\n                                renderInput={(params) => <TextField {...params} label=\"Quiz Topic Tags\" margin=\"normal\" />}\n                            />\n\n                            {genreError && <span style={{ color: 'red' }}>Quiz Topic is required</span>}\n                        </Grid>\n\n                        <Grid item sm={12}>\n                            <FormControl margin=\"normal\" fullWidth>\n                                <InputLabel id=\"demo-multiple-checkbox-label\">Quiz Type</InputLabel>\n                                <Select\n                                    labelId=\"demo-multiple-checkbox-label\"\n                                    id=\"demo-multiple-checkbox\"\n                                    value={type}\n                                    onChange={(e) => setType(e.target.value)}\n                                    input={<OutlinedInput label=\"Select Type\" />}\n                                >\n                                    <MenuItem value=\"Live Quiz\">Live Quiz</MenuItem>\n                                    <MenuItem value=\"Play at Your Own Time Quiz\">Play at Your Own Time Quiz</MenuItem>\n                                    <MenuItem value=\"Scheduled Quiz\">Scheduled Quiz</MenuItem>\n                                </Select>\n                            </FormControl>\n                            {typeError && <span style={{ color: 'red' }}>Type is required</span>}\n                        </Grid>\n                    </Grid>\n                    <Grid sx={{ display: 'flex', justifyContent: 'center', marginTop: '15px' }}>\n                        <AnimateButton>\n                            <Button\n                                disableElevation\n                                sx={{ width: 200, background: '#B92136' }}\n                                size=\"large\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                            >\n                                Create\n                            </Button>\n                        </AnimateButton>\n                    </Grid>\n                </form>\n            )}\n        </>\n    );\n};\n\nexport default QuizForm;\n","import { Divider, Grid } from '@mui/material';\nimport AuthWrapper1 from '../pages/authentication/AuthWrapper1';\nimport AuthCardWrapper from '../pages/authentication/AuthCardWrapper';\nimport AuthFooter from 'ui-component/cards/AuthFooter';\nimport QuizForm from './quizform';\nimport MainCard from 'ui-component/cards/MainCard';\n\nconst CreateQuiz = () => {\n    return (\n        <MainCard title=\"Create Quiz\" navigation=\"/quizzes\">\n            <AuthWrapper1>\n                <Grid container direction=\"column\" justifyContent=\"flex-end\" sx={{ minHeight: '20vh' }}>\n                    <Grid item xs={12}>\n                        <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ minHeight: 'calc(100vh - 68px)' }}>\n                            <Grid item sx={{ m: { xs: 1, sm: 3 }, mb: 0 }}>\n                                <AuthCardWrapper>\n                                    <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n                                        <Grid item xs={12}>\n                                            <QuizForm />\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <Divider />\n                                        </Grid>\n                                    </Grid>\n                                </AuthCardWrapper>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} sx={{ m: 3, mt: 1 }}>\n                        <AuthFooter />\n                    </Grid>\n                </Grid>\n            </AuthWrapper1>\n        </MainCard>\n    );\n};\n\nexport default CreateQuiz;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { Box } from '@mui/material';\n\n// project import\nimport MainCard from 'ui-component/cards/MainCard';\n\n// ==============================|| AUTHENTICATION CARD WRAPPER ||============================== //\n\nconst AuthCardWrapper = ({ children, ...other }) => (\n    <MainCard\n        sx={{\n            maxWidth: { xs: 400, lg: 475 },\n            margin: { xs: 2.5, md: 3 },\n            '& > *': {\n                flexGrow: 1,\n                flexBasis: '50%'\n            }\n        }}\n        content={false}\n        {...other}\n    >\n        <Box sx={{ p: { xs: 2, sm: 3, xl: 5 } }}>{children}</Box>\n    </MainCard>\n);\n\nAuthCardWrapper.propTypes = {\n    children: PropTypes.node\n};\n\nexport default AuthCardWrapper;\n","// material-ui\nimport { styled } from '@mui/material/styles';\n\n// ==============================|| AUTHENTICATION 1 WRAPPER ||============================== //\n\nconst AuthWrapper1 = styled('div')(({ theme }) => ({\n    backgroundColor: theme.palette.primary.light,\n    minHeight: '100vh'\n}));\n\nexport default AuthWrapper1;\n"],"names":["direction","justifyContent","others","useState","loading","setLoading","genreError","setGenreError","topics","setTopics","topic","setTopic","coverImageError","setCoverImageError","type","setType","coverImage","setCoverImage","typeError","setTypeError","navigate","useNavigate","theme","useTheme","matchDownSM","useMediaQuery","breakpoints","down","useSearchParams","queryParamsLeagues","get","firebase","collection","useForm","mode","handleSubmit","errors","formState","control","getTopics","config","docs","map","doc","data","Topics","label","name","value","console","log","useEffect","onSubmit","quizData","length","id","moment","valueOf","genre","val","toString","createdAt","storageRef","storageReference","getStorage","uploadBytes","imgSnapshot","getDownloadURL","ref","url","Img","set","update","quizzes","merge","Grid","container","spacing","style","display","flexDirection","alignItems","CircularProgress","noValidate","item","xs","sm","rules","required","minLength","message","render","field","TextField","fullWidth","margin","title","color","detail","Rules","sx","marginTop","Button","component","variant","size","borderRadius","height","hidden","accept","onChange","e","target","files","md","width","alt","src","URL","createObjectURL","Autocomplete","disablePortal","multiple","options","renderInput","params","FormControl","InputLabel","Select","labelId","input","OutlinedInput","MenuItem","AnimateButton","disableElevation","background","MainCard","navigation","AuthWrapper1","minHeight","m","mb","AuthCardWrapper","Divider","mt","AuthFooter","children","other","maxWidth","lg","flexGrow","flexBasis","content","p","xl","styled","backgroundColor","palette","primary","light"],"sourceRoot":""}