{"version":3,"file":"static/js/53.be20e401.chunk.js","mappings":"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","sources":["views/questions/topictable.js","views/questions/allTopicsSub.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n    Button,\n    Chip,\n    TablePagination,\n    Table,\n    TableCell,\n    TableBody,\n    TableHead,\n    TableRow,\n    TableContainer,\n    Paper,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    DialogContent,\n    Grid,\n    FormControl,\n    TextField,\n    Select,\n    MenuItem,\n    InputLabel,\n    Stack,\n    Autocomplete\n} from '@mui/material';\nimport moment from 'moment';\nimport firebase from '../../frebase/firebase';\nimport { Delete, Edit } from '@mui/icons-material';\nimport ConfirmDialog from '../../shared/confirmDialogue';\nimport { CSVLink } from 'react-csv';\n\nexport default function TopicTable(props) {\n    const {\n        data,\n        columns,\n        page,\n        handleChangePage,\n        length,\n        loading,\n        rowsPerPage,\n        handleChangeRowsPerPage,\n        setData,\n        setMode,\n        mode,\n        allTopics\n    } = props;\n    const [showModal, setShowModal] = useState(false);\n    const [formData, setFormData] = useState({ name: '', type: '' });\n    const [chosenTopic, setChosenTopic] = useState(null);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n    const [selectedTopic, setSelectedTopic] = useState(null);\n    const [errors, setErrors] = useState({ name: null, type: null });\n    const [csvModal, setCsvModal] = useState(false);\n    const [startDate, setStartDate] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [startDateError, setStartDateError] = useState('');\n    const [endDateError, setEndDateError] = useState('');\n    const [topics, setTopics] = useState([]);\n    const csvButtonRef = useRef();\n\n    const handleChange = (event) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const openModal = () => {\n        setShowModal(true);\n    };\n\n    const closeModal = () => {\n        setShowModal(false);\n        setSelectedTopic(null);\n        setFormData({ name: '', type: '' });\n    };\n\n    const createTopic = async () => {\n        try {\n            if (formData.name === '') {\n                setErrors({ name: true });\n                return;\n            }\n            if (formData.type === '') {\n                setErrors({ type: true });\n                return;\n            }\n            const config = (await firebase.firestore().collection('Config').get()).docs.map((doc) => doc.data());\n            const ref = firebase.firestore().collection('Config');\n            if (selectedTopic === null) {\n                const id = moment().valueOf();\n                formData.createdAt = id;\n                formData.selected = false;\n                formData.id = id.toString();\n                if (formData.type === 'subTopic') {\n                    if (chosenTopic === null) return;\n                    formData.topic = chosenTopic.value;\n                    await ref.doc('QuizSubTopics').update({ SubTopics: [formData, ...config[0].SubTopics] });\n                } else {\n                    await ref.doc('QuizTopics').update({ Topics: [formData, ...config[1].Topics] });\n                }\n                setData([formData, ...data]);\n                closeModal();\n                setFormData({ name: '', type: '' });\n            } else {\n                let filteredData = [];\n                const topicFound = data.filter((topic) => topic.id === selectedTopic);\n                formData.createdAt = topicFound[0].createdAt;\n                formData.id = topicFound[0].id;\n                formData.selected = false;\n                if (topicFound[0].type === 'topic') {\n                    filteredData = config[1].Topics.map((topic) => (topic.id == selectedTopic ? formData : topic));\n                    await ref.doc('QuizTopics').update({ Topics: filteredData });\n                } else {\n                    filteredData = config[0].SubTopics.map((topic) => (topic.id == selectedTopic ? formData : topic));\n                    await ref.doc('QuizSubTopics').update({ SubTopics: filteredData });\n                }\n                setData(data.map((topic) => (topic.id === selectedTopic ? formData : topic)));\n                setSelectedTopic(null);\n                setFormData({ name: '', type: '' });\n                setShowModal(false);\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const cancelHandler = () => {\n        setSelectedTopic(null);\n        setShowConfirmModal(false);\n    };\n\n    const deleteTopic = async () => {\n        try {\n            if (selectedTopic !== null) {\n                let filteredData;\n                const topicFound = data.filter((topic) => topic.id === selectedTopic);\n                const ref = firebase.firestore().collection('Config');\n                const config = (await firebase.firestore().collection('Config').get()).docs.map((doc) => doc.data());\n                if (topicFound[0].type === 'topic') {\n                    filteredData = config[1].Topics.filter((topic) => topic.id != selectedTopic);\n                    await ref.doc('QuizTopics').update({ Topics: filteredData });\n                } else {\n                    filteredData = config[0].SubTopics.filter((topic) => topic.id != selectedTopic);\n                    await ref.doc('QuizSubTopics').update({ SubTopics: filteredData });\n                }\n                setData(data.filter((topic) => topic.id !== selectedTopic));\n                cancelHandler();\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const editHandler = (row) => {\n        setFormData({ name: row.name, type: row.type });\n        setSelectedTopic(row.id);\n        setShowModal(true);\n    };\n\n    const exportCsv = () => {\n        try {\n            if (startDate.length === 0) {\n                setStartDateError(true);\n                return;\n            }\n            if (endDate.length === 0) {\n                setEndDateError(true);\n                return;\n            }\n            const unixStartDate = moment(startDate).valueOf();\n            const unixEndDate = moment(endDate).valueOf();\n            const topics = data\n                .filter((topic) => topic.createdAt >= unixStartDate && topic.createdAt <= unixEndDate)\n                .map((topic) => ({\n                    'Topic Name': topic.name,\n                    Type: topic?.type,\n                    'Created On': moment(topic.createdAt).fromNow()\n                }));\n\n            setTopics(topics);\n            csvButtonRef.current.link.click();\n            closeCsvModal();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const closeCsvModal = () => {\n        setStartDate('');\n        setEndDate('');\n        setStartDateError(false);\n        setEndDateError(false);\n        setCsvModal(false);\n    };\n    return (\n        <>\n            <div>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Button variant=\"outlined\" color=\"info\" onClick={openModal}>\n                        Create Topic\n                    </Button>\n\n                    <div>\n                        <FormControl sx={{ width: '200px' }}>\n                            <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                size=\"small\"\n                                id=\"demo-simple-select\"\n                                value={mode}\n                                onChange={(e) => setMode(e.target.value)}\n                                label=\"Type\"\n                            >\n                                <MenuItem value=\"topics\">Topics</MenuItem>\n                                <MenuItem value=\"subTopics\">Sub Topics</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <Button variant=\"outlined\" color=\"info\" sx={{ marginLeft: '30px' }} onClick={() => setCsvModal(true)}>\n                            Export\n                        </Button>\n                    </div>\n                </div>\n\n                <Paper>\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\" sx={{ minWidth: 650 }} size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((col, index) => (\n                                        <TableCell align=\"center\" key={index} style={{ whiteSpace: 'nowrap' }}>\n                                            {col.name}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((row, index) => {\n                                    return (\n                                        <TableRow key={index}>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {row?.name}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                <Chip label={row?.type} color={row?.type === 'topic' ? 'primary' : 'success'} />\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {moment(row?.createdAt).fromNow()}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                <div>\n                                                    <Button color=\"info\" variant=\"outlined\" size=\"small\" onClick={() => editHandler(row)}>\n                                                        <Edit />\n                                                    </Button>\n\n                                                    <Button\n                                                        color=\"error\"\n                                                        variant=\"outlined\"\n                                                        size=\"small\"\n                                                        style={{ marginLeft: '20px' }}\n                                                        onClick={() => {\n                                                            setSelectedTopic(row.id);\n                                                            setShowConfirmModal(true);\n                                                        }}\n                                                    >\n                                                        <Delete />\n                                                    </Button>\n                                                </div>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    <TablePagination\n                        rowsPerPageOptions={[10, 25]}\n                        component=\"div\"\n                        count={length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </div>\n\n            <ConfirmDialog open={showConfirmModal} cancelHandler={cancelHandler} confirmHandler={deleteTopic} />\n\n            {/* create topics dialogue */}\n            <Dialog open={showModal} id=\"my-popover-id-name\">\n                <DialogTitle>{selectedTopic ? 'Update Topic' : 'Create Topic'}</DialogTitle>\n                <DialogContent>\n                    <Grid container>\n                        <Grid item sm={12}>\n                            <TextField fullWidth label=\"Name\" margin=\"normal\" name=\"name\" value={formData.name} onChange={handleChange} />\n                            {errors.name && <span style={{ color: 'red' }}>Name is required</span>}\n                        </Grid>\n                        <Grid item sm={12}>\n                            <FormControl margin=\"normal\" fullWidth>\n                                <InputLabel id=\"demo-multiple-checkbox-label\">Select Type</InputLabel>\n                                <Select\n                                    labelId=\"demo-multiple-checkbox-label\"\n                                    label=\"Select Type\"\n                                    id=\"demo-multiple-checkbox\"\n                                    value={formData.type}\n                                    onChange={handleChange}\n                                    name=\"type\"\n                                >\n                                    <MenuItem value=\"topic\">Topic</MenuItem>\n                                    <MenuItem value=\"subTopic\">Sub Topic</MenuItem>\n                                </Select>\n                            </FormControl>\n                            {errors.type && <span style={{ color: 'red' }}>Topic type is required</span>}\n                        </Grid>\n                        {formData.type === 'subTopic' && (\n                            <Grid item sm={12}>\n                                <FormControl margin=\"normal\" fullWidth>\n                                    <Autocomplete\n                                        onChange={(event, newInputValue) => setChosenTopic(newInputValue)}\n                                        disablePortal\n                                        id=\"combo-box-demo\"\n                                        options={allTopics\n                                            .filter((topic) => topic.type === 'topic')\n                                            .map((topic) => ({ label: topic.name, value: topic.id }))}\n                                        renderInput={(params) => <TextField {...params} label=\"Topics\" margin=\"normal\" />}\n                                    />\n                                </FormControl>\n                            </Grid>\n                        )}\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" onClick={closeModal}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"outlined\" onClick={createTopic} color=\"error\">\n                        {selectedTopic !== null ? 'update' : 'Create'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            {/* csv dialogue */}\n\n            <Dialog\n                open={csvModal}\n                onClose={closeCsvModal}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"xs\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">Please select date range</DialogTitle>\n                <DialogContent>\n                    <Grid container>\n                        <Grid xs={12}>\n                            <TextField\n                                fullWidth\n                                id=\"outlined-basic\"\n                                margin=\"normal\"\n                                label=\"Start date\"\n                                variant=\"outlined\"\n                                value={startDate}\n                                onChange={(e) => setStartDate(e.target.value)}\n                                type=\"date\"\n                                InputLabelProps={{ shrink: true }}\n                            />\n                            {startDateError && <span style={{ color: 'red' }}>Start Date is required</span>}\n                        </Grid>\n                        <Grid xs={12}>\n                            <TextField\n                                fullWidth\n                                id=\"outlined-basic\"\n                                margin=\"normal\"\n                                label=\"Block Reason\"\n                                variant=\"outlined\"\n                                InputLabelProps={{ shrink: true }}\n                                type=\"date\"\n                                value={endDate}\n                                onChange={(e) => setEndDate(e.target.value)}\n                            />\n                            {endDateError && <span style={{ color: 'red' }}>End Date is required</span>}\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Stack direction=\"row\" spacing={2}>\n                        <Button color=\"error\" variant=\"outlined\" onClick={closeCsvModal}>\n                            Cancel\n                        </Button>\n                        <Button color=\"primary\" variant=\"outlined\" onClick={exportCsv}>\n                            Export\n                        </Button>\n                        <CSVLink ref={csvButtonRef} target=\"_blank\" filename=\"Topic_report.csv\" data={topics} />\n                    </Stack>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport TopicTable from './topictable';\nimport MainCard from 'ui-component/cards/MainCard';\nimport firebase from '../../frebase/firebase';\n\nconst columns = [\n    {\n        name: 'Topic Name'\n    },\n    {\n        name: 'Type'\n    },\n    {\n        name: 'Created On'\n    },\n    {\n        name: 'Actions'\n    }\n];\n\nconst Topics = () => {\n    const [topics, setTopics] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [lastDoc, setLastDoc] = useState();\n    const [firstDoc, setFirstDoc] = useState();\n    const [allTopics, setAllTopics] = useState([]);\n    const [mode, setMode] = useState('topics');\n\n    const getTopicsSubTopics = async (limit = rowsPerPage) => {\n        try {\n            const config = (await firebase.firestore().collection('Config').get()).docs.map((doc) => doc.data());\n            console.log(config, 'ddd');\n            let topics = [];\n            if (mode === 'topics') {\n                topics = config[1].Topics.slice(0, limit);\n            } else {\n                topics = config[0].SubTopics.slice(0, limit);\n            }\n            const lastDoc = topics[topics - 1];\n            setTopics(topics);\n            setAllTopics(config[1].Topics);\n            setLastDoc(lastDoc);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleChangePage = async (_, newPage) => {\n        const config = (await firebase.firestore().collection('Config').get()).docs.map((doc) => doc.data());\n        let topics = [];\n        if (mode === 'topics') {\n            topics = config[1].Topics;\n        } else {\n            topics = config[0].SubTopics;\n        }\n        setLoading(true);\n        const previousPage = page;\n        setPage(newPage);\n        if (newPage > previousPage) {\n            const index = topics.findIndex((topic) => topic.id == lastDoc.id);\n            const nextTopics = topics.filter((_, ind) => ind > index).splice(0, rowsPerPage);\n            const ldoc = nextTopics[nextTopics.length - 1];\n            const fdoc = nextTopics[0];\n            setFirstDoc(fdoc);\n            setLastDoc(ldoc);\n            setTopics(nextTopics);\n            setLoading(false);\n        } else {\n            const index = topics.findIndex((topic) => topic.id == lastDoc.id);\n            const nextTopics = topics.filter((_, ind) => ind < index).splice(0, rowsPerPage);\n            const ldoc = nextTopics[nextTopics.length - 1];\n            const fdoc = nextTopics[0];\n            setFirstDoc(fdoc);\n            setLastDoc(ldoc);\n            setTopics(nextTopics);\n            setLoading(false);\n        }\n    };\n\n    const handleChangeRowsPerPage = async (event) => {\n        try {\n            const config = (await firebase.firestore().collection('Config').get()).docs.map((doc) => doc.data());\n            let topics = [];\n            if (mode === 'topics') {\n                topics = config[1].Topics.slice(0, event.target.value);\n            } else {\n                topics = config[0].SubTopics.slice(0, event.target.value);\n            }\n            setRowsPerPage(event.target.value);\n            setPage(0);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        getTopicsSubTopics();\n    }, [mode]);\n\n    return (\n        <MainCard title=\"Topics/Sub-Topics\">\n            <TopicTable\n                data={topics}\n                setData={(newData) => setTopics(newData)}\n                columns={columns}\n                setLoading={setLoading}\n                loading={loading}\n                length={topics.length}\n                page={page}\n                rowsPerPage={rowsPerPage}\n                handleChangePage={handleChangePage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n                setMode={setMode}\n                mode={mode}\n                allTopics={allTopics}\n            />\n        </MainCard>\n    );\n};\nexport default Topics;\n"],"names":["TopicTable","props","data","columns","page","handleChangePage","length","rowsPerPage","loading","handleChangeRowsPerPage","setData","setMode","mode","allTopics","useState","showModal","setShowModal","name","type","formData","setFormData","chosenTopic","setChosenTopic","showConfirmModal","setShowConfirmModal","selectedTopic","setSelectedTopic","errors","setErrors","csvModal","setCsvModal","startDate","setStartDate","endDate","setEndDate","startDateError","setStartDateError","endDateError","setEndDateError","topics","setTopics","csvButtonRef","useRef","handleChange","event","target","value","closeModal","createTopic","firebase","collection","get","config","docs","map","doc","ref","id","moment","valueOf","createdAt","selected","toString","topic","update","SubTopics","Topics","filteredData","topicFound","filter","console","log","cancelHandler","deleteTopic","closeCsvModal","style","display","justifyContent","alignItems","Button","variant","color","onClick","FormControl","sx","width","InputLabel","Select","labelId","size","onChange","e","label","MenuItem","marginLeft","Paper","TableContainer","component","Table","minWidth","TableHead","TableRow","col","index","TableCell","align","whiteSpace","TableBody","row","Chip","fromNow","editHandler","Edit","Delete","TablePagination","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","open","confirmHandler","Dialog","DialogTitle","DialogContent","Grid","container","item","sm","TextField","fullWidth","margin","Autocomplete","newInputValue","disablePortal","options","renderInput","params","DialogActions","onClose","maxWidth","xs","InputLabelProps","shrink","Stack","direction","spacing","unixStartDate","unixEndDate","Type","current","link","click","error","CSVLink","filename","setLoading","setPage","setRowsPerPage","lastDoc","setLastDoc","setFirstDoc","setAllTopics","getTopicsSubTopics","limit","slice","_","newPage","previousPage","findIndex","nextTopics","ind","splice","ldoc","fdoc","useEffect","MainCard","title","newData"],"sourceRoot":""}