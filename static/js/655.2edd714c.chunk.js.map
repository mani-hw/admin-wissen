{"version":3,"file":"static/js/655.2edd714c.chunk.js","mappings":"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","sources":["ui-component/cards/Skeleton/EarningCard.js","views/dashboard/Default/TotalOrderLineChartCard.js","ui-component/cards/Skeleton/TotalIncomeCard.js","views/dashboard/Default/TotalIncomeDarkCard.js","views/dashboard/Default/TotalIncomeLightCard.js","ui-component/cards/Skeleton/TotalGrowthBarChart.js","views/dashboard/Default/chart-data/total-growth-bar-chart.js","views/dashboard/Default/quizchart.js","views/dashboard/Default/userchart.js","views/dashboard/Default/leaguesChart.js","views/dashboard/Default/index.js"],"sourcesContent":["// material-ui\nimport { Card, CardContent, Grid } from '@mui/material';\nimport Skeleton from '@mui/material/Skeleton';\n\n// ==============================|| SKELETON - EARNING CARD ||============================== //\n\nconst EarningCard = () => (\n    <Card>\n        <CardContent>\n            <Grid container direction=\"column\">\n                <Grid item>\n                    <Grid container justifyContent=\"space-between\">\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\n                        </Grid>\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" height={30} />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </Card>\n);\n\nexport default EarningCard;\n","import { Avatar, Box, Button, Grid, Typography } from '@mui/material';\nimport { styled, useTheme } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SkeletonTotalOrderCard from 'ui-component/cards/Skeleton/EarningCard';\nimport { IconFlag2, IconBulb } from '@tabler/icons';\n\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    backgroundColor: theme.palette.primary.dark,\n    cursor: 'pointer',\n    color: '#fff',\n    overflow: 'hidden',\n    position: 'relative',\n    '&>div': {\n        position: 'relative',\n        zIndex: 5\n    },\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: theme.palette.primary[800],\n        borderRadius: '50%',\n        zIndex: 1,\n        top: -85,\n        right: -95,\n        [theme.breakpoints.down('sm')]: {\n            top: -105,\n            right: -140\n        }\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        zIndex: 1,\n        width: 210,\n        height: 210,\n        background: theme.palette.primary[800],\n        borderRadius: '50%',\n        top: -125,\n        right: -15,\n        opacity: 0.5,\n        [theme.breakpoints.down('sm')]: {\n            top: -155,\n            right: -70\n        }\n    }\n}));\n\n// ==============================|| DASHBOARD - TOTAL ORDER LINE CHART CARD ||============================== //\n\nconst TotalOrderLineChartCard = ({ isLoading, btn1, btn2, btn1Text, btn2Text, cardText, toogleMode }) => {\n    const theme = useTheme();\n\n    const [timeValue, setTimeValue] = useState(false);\n    const handleChangeTime = (event, newValue) => {\n        setTimeValue(newValue);\n    };\n\n    console.log({ isLoading, btn2 });\n\n    return (\n        <>\n            {isLoading ? (\n                <SkeletonTotalOrderCard />\n            ) : (\n                <CardWrapper border={false} content={false}>\n                    <Box\n                        sx={{ p: 2.25 }}\n                        onClick={() => {\n                            if (cardText === 'Quizzes') {\n                                toogleMode('quizes');\n                            } else if (cardText === 'Leagues') {\n                                toogleMode('leagues');\n                            }\n                        }}\n                    >\n                        <Grid container direction=\"column\">\n                            <Grid item>\n                                <Grid container justifyContent=\"space-between\">\n                                    <Grid item>\n                                        <Avatar\n                                            variant=\"rounded\"\n                                            sx={{\n                                                ...theme.typography.commonAvatar,\n                                                ...theme.typography.largeAvatar,\n                                                backgroundColor: theme.palette.primary[800],\n                                                color: '#fff',\n                                                mt: 1\n                                            }}\n                                        >\n                                            {cardText === 'Quizzes' ? <IconBulb fontSize=\"inherit\" /> : <IconFlag2 fontSize=\"inherit\" />}\n                                        </Avatar>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            disableElevation\n                                            variant={timeValue ? 'contained' : 'text'}\n                                            size=\"small\"\n                                            sx={{ color: 'inherit' }}\n                                            onClick={(e) => handleChangeTime(e, true)}\n                                        >\n                                            {btn1Text}\n                                        </Button>\n                                        <Button\n                                            disableElevation\n                                            variant={!timeValue ? 'contained' : 'text'}\n                                            size=\"small\"\n                                            sx={{ color: 'inherit' }}\n                                            onClick={(e) => handleChangeTime(e, false)}\n                                        >\n                                            {btn2Text}\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item sx={{ mb: 0.75 }}>\n                                <Grid container alignItems=\"center\">\n                                    <Grid item xs={6}>\n                                        <Grid container alignItems=\"center\">\n                                            <Grid item>\n                                                {timeValue ? (\n                                                    <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\n                                                        {btn1}\n                                                    </Typography>\n                                                ) : (\n                                                    <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\n                                                        {btn2}\n                                                    </Typography>\n                                                )}\n                                            </Grid>\n                                            {/* <Grid item>\n                                                <Avatar\n                                                    sx={{\n                                                        ...theme.typography.smallAvatar,\n                                                        cursor: 'pointer',\n                                                        backgroundColor: theme.palette.primary[200],\n                                                        color: theme.palette.primary.dark\n                                                    }}\n                                                >\n                                                    <ArrowDownwardIcon fontSize=\"inherit\" sx={{ transform: 'rotate3d(1, 1, 1, 45deg)' }} />\n                                                </Avatar>\n                                            </Grid> */}\n                                            <Grid item xs={12}>\n                                                <Typography\n                                                    sx={{\n                                                        fontSize: '1rem',\n                                                        fontWeight: 500,\n                                                        color: theme.palette.primary[200]\n                                                    }}\n                                                >\n                                                    {cardText}\n                                                </Typography>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    {/* <Grid item xs={6}>\n                                        {timeValue ? <Chart {...ChartDataMonth} /> : <Chart {...ChartDataYear} />}\n                                    </Grid> */}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    );\n};\n\nTotalOrderLineChartCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default TotalOrderLineChartCard;\n","// material-ui\nimport { Card, List, ListItem, ListItemAvatar, ListItemText, Skeleton } from '@mui/material';\n\n// ==============================|| SKELETON - TOTAL INCOME DARK/LIGHT CARD ||============================== //\n\nconst TotalIncomeCard = () => (\n    <Card sx={{ p: 2 }}>\n        <List sx={{ py: 0 }}>\n            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                <ListItemAvatar>\n                    <Skeleton variant=\"rectangular\" width={44} height={44} />\n                </ListItemAvatar>\n                <ListItemText\n                    sx={{ py: 0 }}\n                    primary={<Skeleton variant=\"rectangular\" height={20} />}\n                    secondary={<Skeleton variant=\"text\" />}\n                />\n            </ListItem>\n        </List>\n    </Card>\n);\n\nexport default TotalIncomeCard;\n","import PropTypes from 'prop-types';\nimport { styled, useTheme } from '@mui/material/styles';\nimport { Avatar, Box, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\nimport MainCard from 'ui-component/cards/MainCard';\nimport TotalIncomeCard from 'ui-component/cards/Skeleton/TotalIncomeCard';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\n\n// styles\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    backgroundColor: theme.palette.primary.dark,\n    cursor: 'pointer',\n    color: theme.palette.primary.light,\n    overflow: 'hidden',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(210.04deg, ${theme.palette.primary[200]} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\n        borderRadius: '50%',\n        top: -30,\n        right: -180\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(140.9deg, ${theme.palette.primary[200]} -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\n        borderRadius: '50%',\n        top: -160,\n        right: -130\n    }\n}));\n\nconst TotalIncomeDarkCard = ({ isLoading, users, toogleMode, onlineUsers }) => {\n    const theme = useTheme();\n\n    return (\n        <>\n            {isLoading ? (\n                <TotalIncomeCard />\n            ) : (\n                <CardWrapper border={false} content={false}>\n                    <Box\n                        sx={{ p: 2 }}\n                        onClick={() => {\n                            toogleMode('users');\n                        }}\n                    >\n                        <List sx={{ py: 0 }}>\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                        variant=\"rounded\"\n                                        sx={{\n                                            ...theme.typography.commonAvatar,\n                                            ...theme.typography.largeAvatar,\n                                            backgroundColor: theme.palette.primary[800],\n                                            color: '#fff'\n                                        }}\n                                    >\n                                        <PersonOutlineIcon fontSize=\"inherit\" />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    sx={{\n                                        py: 0,\n                                        mt: 0.45,\n                                        mb: 0.45\n                                    }}\n                                    primary={\n                                        <Typography variant=\"h4\" sx={{ color: '#fff' }}>\n                                            {users.length}\n                                        </Typography>\n                                    }\n                                    secondary={\n                                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.light', mt: 0.25 }}>\n                                            Total Users\n                                        </Typography>\n                                    }\n                                />\n                                <ListItemText\n                                    sx={{\n                                        py: 0,\n                                        mt: 0.45,\n                                        mb: 0.45\n                                    }}\n                                    primary={\n                                        <Typography variant=\"h4\" sx={{ color: '#fff' }}>\n                                            {users.filter((user) => user.newUser === true).length}\n                                        </Typography>\n                                    }\n                                    secondary={\n                                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.light', mt: 0.25 }}>\n                                            New Users\n                                        </Typography>\n                                    }\n                                />\n                                <ListItemText\n                                    sx={{\n                                        py: 0,\n                                        mt: 0.45,\n                                        mb: 0.45\n                                    }}\n                                    primary={\n                                        <Typography variant=\"h4\" sx={{ color: '#fff' }}>\n                                            {onlineUsers}\n                                        </Typography>\n                                    }\n                                    secondary={\n                                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.light', mt: 0.25 }}>\n                                            Online Users\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                        </List>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    );\n};\n\nTotalIncomeDarkCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default TotalIncomeDarkCard;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Avatar, Box, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport TotalIncomeCard from 'ui-component/cards/Skeleton/TotalIncomeCard';\n\n// assets\nimport StorefrontTwoToneIcon from '@mui/icons-material/StorefrontTwoTone';\n\n// styles\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    overflow: 'hidden',\n    cursor: 'pointer',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(210.04deg, ${theme.palette.warning.dark} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\n        borderRadius: '50%',\n        top: -30,\n        right: -180\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(140.9deg, ${theme.palette.warning.dark} -14.02%, rgba(144, 202, 249, 0) 70.50%)`,\n        borderRadius: '50%',\n        top: -160,\n        right: -130\n    }\n}));\n\n// ==============================|| DASHBOARD - TOTAL INCOME LIGHT CARD ||============================== //\n\nconst TotalIncomeLightCard = ({ isLoading }) => {\n    const theme = useTheme();\n\n    return (\n        <>\n            {isLoading ? (\n                <TotalIncomeCard />\n            ) : (\n                <CardWrapper border={false} content={false}>\n                    <Box sx={{ p: 2 }}>\n                        <List sx={{ py: 0 }}>\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                        variant=\"rounded\"\n                                        sx={{\n                                            ...theme.typography.commonAvatar,\n                                            ...theme.typography.largeAvatar,\n                                            backgroundColor: theme.palette.warning.light,\n                                            color: theme.palette.warning.dark\n                                        }}\n                                    >\n                                        <StorefrontTwoToneIcon fontSize=\"inherit\" />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    sx={{\n                                        py: 0,\n                                        mt: 0.45,\n                                        mb: 0.45\n                                    }}\n                                    primary={<Typography variant=\"h4\">$203k</Typography>}\n                                    secondary={\n                                        <Typography\n                                            variant=\"subtitle2\"\n                                            sx={{\n                                                color: theme.palette.grey[500],\n                                                mt: 0.5\n                                            }}\n                                        >\n                                            Total Income\n                                        </Typography>\n                                    }\n                                />\n                            </ListItem>\n                        </List>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    );\n};\n\nTotalIncomeLightCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default TotalIncomeLightCard;\n","// material-ui\nimport { Card, CardContent, Grid } from '@mui/material';\nimport Skeleton from '@mui/material/Skeleton';\n\n// project imports\nimport { gridSpacing } from 'store/constant';\n\n// ==============================|| SKELETON TOTAL GROWTH BAR CHART ||============================== //\n\nconst TotalGrowthBarChart = () => (\n    <Card>\n        <CardContent>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\n                        <Grid item xs zeroMinWidth>\n                            <Grid container spacing={1}>\n                                <Grid item xs={12}>\n                                    <Skeleton variant=\"text\" />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Skeleton variant=\"rectangular\" height={20} />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" height={50} width={80} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Skeleton variant=\"rectangular\" height={530} />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </Card>\n);\n\nexport default TotalGrowthBarChart;\n","// ===========================|| DASHBOARD - TOTAL GROWTH BAR CHART ||=========================== //\n\nconst chartData = {\n    height: 480,\n    type: 'bar',\n    options: {\n        responsive: [\n            {\n                breakpoint: 480,\n                options: {\n                    legend: {\n                        position: 'bottom',\n                        offsetX: -10,\n                        offsetY: 0\n                    }\n                }\n            }\n        ],\n        plotOptions: {\n            bar: {\n                horizontal: false,\n                columnWidth: '50%'\n            }\n        },\n\n        legend: {\n            show: true,\n            fontSize: '14px',\n            fontFamily: `'Roboto', sans-serif`,\n            position: 'bottom',\n            offsetX: 20,\n            labels: {\n                useSeriesColors: false\n            },\n            markers: {\n                width: 16,\n                height: 16,\n                radius: 5\n            },\n            itemMargin: {\n                horizontal: 15,\n                vertical: 8\n            }\n        },\n        fill: {\n            type: 'solid'\n        },\n        dataLabels: {\n            enabled: false\n        },\n        grid: {\n            show: true\n        }\n    }\n};\nexport default chartData;\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material';\nimport ApexCharts from 'apexcharts';\nimport Chart from 'react-apexcharts';\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant';\nimport chartData from './chart-data/total-growth-bar-chart';\n\nconst status = [\n    {\n        value: 'today',\n        label: 'Today'\n    },\n    {\n        value: 'week',\n        label: 'This Week'\n    },\n    {\n        value: 'month',\n        label: 'This Month'\n    },\n    {\n        value: 'year',\n        label: 'This Year'\n    }\n];\n\nconst QuizChart = ({ isLoading, quizes }) => {\n    const [value, setValue] = useState('today');\n    const theme = useTheme();\n    const customization = useSelector((state) => state.customization);\n    const [xAxis, setxAxis] = useState([]);\n    const [scheduled, setScheduled] = useState([]);\n    const [playAt, setPlayAt] = useState([]);\n    const [live, setLive] = useState(quizes.filter((quiz) => quiz.type === 'Live Quiz'));\n    const [yAxis, setYAxis] = useState([]);\n    const { navType } = customization;\n    const { primary } = theme.palette.text;\n    const darkLight = theme.palette.dark.light;\n    const grey200 = theme.palette.grey[200];\n    const grey500 = theme.palette.grey[500];\n    const primary200 = theme.palette.primary[200];\n    const primaryDark = theme.palette.primary.dark;\n    const secondaryMain = theme.palette.secondary.main;\n    const secondaryLight = theme.palette.secondary.light;\n\n    useEffect(() => {\n        const newChartData = {\n            ...chartData.options,\n            colors: [primary200, primaryDark, secondaryMain, secondaryLight],\n            xaxis: {\n                labels: {\n                    style: {\n                        colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n                    }\n                }\n            },\n            yaxis: {\n                labels: {\n                    style: {\n                        colors: [primary]\n                    }\n                }\n            },\n            grid: {\n                borderColor: grey200\n            },\n            tooltip: {\n                theme: 'light'\n            },\n            legend: {\n                labels: {\n                    colors: grey500\n                }\n            }\n        };\n\n        // do not load chart when loading\n        if (!isLoading) {\n            ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\n        }\n    }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\n\n    // check if date is of today\n    const isToday = (dateParameter) => {\n        const today = new Date();\n        return (\n            dateParameter.getDate() === today.getDate() &&\n            dateParameter.getMonth() === today.getMonth() &&\n            dateParameter.getFullYear() === today.getFullYear()\n        );\n    };\n\n    // check if date is in week\n    function isDateInThisWeek(date) {\n        const todayObj = new Date();\n        const todayDate = todayObj.getDate();\n        const todayDay = todayObj.getDay();\n        const firstDayOfWeek = new Date(todayObj.setDate(todayDate - todayDay));\n        const lastDayOfWeek = new Date(firstDayOfWeek);\n        lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);\n        return date >= firstDayOfWeek && date <= lastDayOfWeek;\n    }\n\n    function isDateInThisMonth(dateParameter) {\n        const today = new Date();\n        return dateParameter.getFullYear() === today.getFullYear();\n    }\n\n    function isDayInThisMonth(dateParameter) {\n        const today = new Date();\n        return dateParameter.getMonth() === today.getMonth() && dateParameter.getFullYear() === today.getFullYear();\n    }\n\n    const showDailyStats = (quizzes, setterfunction) => {\n        const yaxis = Array(24).fill(0);\n        const xaxis = [\n            '00:00',\n            '01:00',\n            '02:00',\n            '03:00',\n            '04:00',\n            '05:00',\n            '06:00',\n            '07:00',\n            '08:00',\n            '09:00',\n            '10:00',\n            '11:00',\n            '12:00',\n            '13:00',\n            '14:00',\n            '15:00',\n            '16:00',\n            '17:00',\n            '18:00',\n            '19:00',\n            '20:00',\n            '21:00',\n            '22:00',\n            '23:00',\n            '24:00'\n        ];\n        if (quizzes.length > 0) {\n            quizzes.forEach((quiz) => {\n                if (quiz.createdAt) {\n                    const date = new Date(quiz.createdAt);\n                    if (isToday(date)) {\n                        const index = date.getHours();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showWeeklyStats = (quizzes, setterfunction) => {\n        const yaxis = Array(7).fill(0);\n        const xaxis = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        if (quizzes.length > 0) {\n            quizzes.forEach((quiz) => {\n                if (quiz.createdAt) {\n                    const date = new Date(quiz.createdAt);\n                    if (isDateInThisWeek(date)) {\n                        const index = date.getDay();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n                setterfunction(yaxis);\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showMonthlyStats = (quizzes, setterfunction) => {\n        const days = new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n        const yaxis = Array(days).fill(0);\n        const xaxis = Array.from(Array(days + 1).keys());\n        if (quizzes.length > 0) {\n            quizzes.forEach((quiz) => {\n                if (quiz.createdAt) {\n                    const date = new Date(quiz.createdAt);\n                    if (isDayInThisMonth(date)) {\n                        const index = date.getDate();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showYearlyStats = (quizzes, setterfunction) => {\n        const yaxis = Array(12).fill(0);\n        const xaxis = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        if (quizzes.length > 0) {\n            quizzes.forEach((quiz) => {\n                if (quiz.createdAt) {\n                    const date = new Date(quiz.createdAt);\n                    if (isDateInThisMonth(date)) {\n                        const index = date.getMonth();\n                        yaxis[index] = yaxis[index] + 1;\n                        console.log({ yaxis });\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n                setterfunction(yaxis);\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    useEffect(() => {\n        const liveQuiz = quizes.filter((quiz) => quiz.type === 'Live Quiz');\n        const scheduledQuiz = quizes.filter((quiz) => quiz.type === 'Scheduled Quiz');\n        const playAtQuiz = quizes.filter((quiz) => quiz.type === 'Play at Your Own Time Quiz');\n        if (value === 'today') {\n            showDailyStats(quizes, setYAxis);\n            showDailyStats(liveQuiz, setLive);\n            showDailyStats(playAtQuiz, setPlayAt);\n            showDailyStats(scheduledQuiz, setScheduled);\n        } else if (value === 'week') {\n            showWeeklyStats(quizes, setYAxis);\n            showWeeklyStats(scheduledQuiz, setScheduled);\n            showWeeklyStats(liveQuiz, setLive);\n            showWeeklyStats(playAtQuiz, setPlayAt);\n        } else if (value === 'month') {\n            showMonthlyStats(quizes, setYAxis);\n            showMonthlyStats(scheduledQuiz, setScheduled);\n            showMonthlyStats(liveQuiz, setLive);\n            showMonthlyStats(playAtQuiz, setPlayAt);\n        } else {\n            showYearlyStats(quizes, setYAxis);\n            showYearlyStats(scheduledQuiz, setScheduled);\n            showYearlyStats(liveQuiz, setLive);\n            showYearlyStats(playAtQuiz, setPlayAt);\n        }\n    }, [value]);\n\n    return (\n        <>\n            {isLoading ? (\n                <SkeletonTotalGrowthBarChart />\n            ) : (\n                <MainCard>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                                <Grid item>\n                                    <Grid container direction=\"column\" spacing={1}>\n                                        <Grid item>\n                                            <Typography variant=\"subtitle2\">Total Quizzes</Typography>\n                                        </Grid>\n                                        <Grid item>\n                                            <Typography variant=\"h3\">{quizes.length}</Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        id=\"standard-select-currency\"\n                                        select\n                                        value={value}\n                                        onChange={(e) => setValue(e.target.value)}\n                                    >\n                                        {status.map((option) => (\n                                            <MenuItem key={option.value} value={option.value}>\n                                                {option.label}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        {/* Scheduled, Play at your own time, Live quiz */}\n\n                        <Grid item xs={12}>\n                            <Chart\n                                height={chartData.height}\n                                type={chartData.type}\n                                options={{\n                                    ...chartData.options,\n                                    title: {\n                                        text: \"Quizzes Chart\",\n                                        align: 'center',\n                                        style: {\n                                            fontSize: '20px',\n                                            fontWeight: 600,\n                                            fontFamily: \"'Roboto',sans-serif\",\n                                            color: \"#2196f3\"\n                                        },\n                                    },\n                                    chart: {\n                                        stacked: true,\n                                        toolbar: {\n                                            show: true,\n                                            export: {\n                                                csv: {\n                                                    filename: 'Quizzes Data'\n                                                },\n                                                svg: {\n                                                    filename: 'Quizzes Data'\n                                                },\n                                                png: {\n                                                    filename: 'Quizzes Data'\n                                                }\n                                            }\n                                        },\n                                        zoom: {\n                                            enabled: true\n                                        }\n                                    },\n                                    xaxis: {\n                                        type: 'category',\n                                        categories: xAxis,\n                                        labels: { show: true },\n                                        title: {\n                                            text: `${value === 'today' ? \"Time\" : value === \"week\" ? \"Day\" : value === \"month\" ? \"Date\" : \"Month\"\n                                                }`, style: {\n                                                    fontSize: '15px',\n                                                    fontFamily: \"'Roboto',sans-serif\",\n                                                    fontWeight: 600,\n\n                                                },\n                                        },\n\n                                    },\n                                    yaxis: {\n                                        show: true,\n                                        showAlways: true, labels: { show: true }, title: {\n                                            text: \"Quizzes\", style: {\n                                                fontSize: '15px',\n                                                fontFamily: \"'Roboto',sans-serif\",\n                                                fontWeight: 600,\n\n                                            },\n                                        }\n                                    }\n                                }}\n                                series={[\n                                    { name: 'Quizzes', data: yAxis },\n                                    { name: 'Scheduled', data: scheduled },\n                                    { name: 'Play at your own', data: playAt },\n                                    { name: 'Live Quiz', data: live }\n                                ]}\n                            />\n                        </Grid>\n                    </Grid>\n                </MainCard>\n            )}\n        </>\n    );\n};\n\nexport default QuizChart;\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material';\nimport ApexCharts from 'apexcharts';\nimport Chart from 'react-apexcharts';\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant';\nimport chartData from './chart-data/total-growth-bar-chart';\n\n\nconst status = [\n    {\n        value: 'today',\n        label: 'Today'\n    },\n    {\n        value: 'week',\n        label: 'This Week'\n    },\n    {\n        value: 'month',\n        label: 'This Month'\n    },\n    {\n        value: 'year',\n        label: 'This Year'\n    }\n];\n\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\n\nconst UserChart = ({ isLoading, users, onlineUsers }) => {\n    const [value, setValue] = useState('today');\n    const theme = useTheme();\n    const customization = useSelector((state) => state.customization);\n    const [xAxis, setxAxis] = useState([]);\n    const [yAxis, setYAxis] = useState([]);\n    const [live, setLive] = useState([])\n    const [newUsers, setNewUsers] = useState(users.filter((user) => user.newUser === true));\n    const { navType } = customization;\n    const { primary } = theme.palette.text;\n    const darkLight = theme.palette.dark.light;\n    const grey200 = theme.palette.grey[200];\n    const grey500 = theme.palette.grey[500];\n    const primary200 = theme.palette.primary[200];\n    const primaryDark = theme.palette.primary.dark;\n    const secondaryMain = theme.palette.secondary.main;\n    const secondaryLight = theme.palette.secondary.light;\n\n    useEffect(() => {\n        const newChartData = {\n            ...chartData.options,\n            colors: [primary200, primaryDark, secondaryMain, secondaryLight],\n            xaxis: {\n                labels: {\n                    style: {\n                        colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n                    }\n                }\n            },\n            yaxis: {\n                labels: {\n                    style: {\n                        colors: [primary]\n                    }\n                }\n            },\n            grid: {\n                borderColor: grey200\n            },\n            tooltip: {\n                theme: 'light'\n            },\n            legend: {\n                labels: {\n                    colors: grey500\n                }\n            }\n        };\n\n        // do not load chart when loading\n        if (!isLoading) {\n            ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\n        }\n    }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\n\n    // check if date is of today\n    const isToday = (dateParameter) => {\n        const today = new Date();\n        return (\n            dateParameter.getDate() === today.getDate() &&\n            dateParameter.getMonth() === today.getMonth() &&\n            dateParameter.getFullYear() === today.getFullYear()\n        );\n    };\n\n    // check if date is in week\n    function isDateInThisWeek(date) {\n        const todayObj = new Date();\n        const todayDate = todayObj.getDate();\n        const todayDay = todayObj.getDay();\n        const firstDayOfWeek = new Date(todayObj.setDate(todayDate - todayDay));\n        const lastDayOfWeek = new Date(firstDayOfWeek);\n        lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);\n        return date >= firstDayOfWeek && date <= lastDayOfWeek;\n    }\n\n    function isDateInThisMonth(dateParameter) {\n        const today = new Date();\n        return dateParameter.getFullYear() === today.getFullYear();\n    }\n\n    function isDayInThisMonth(dateParameter) {\n        const today = new Date();\n        return dateParameter.getMonth() === today.getMonth() && dateParameter.getFullYear() === today.getFullYear();\n    }\n\n    const showDailyStats = (users, setterfunction) => {\n        const yaxis = Array(24).fill(0);\n        const xaxis = [\n            '00:00',\n            '01:00',\n            '02:00',\n            '03:00',\n            '04:00',\n            '05:00',\n            '06:00',\n            '07:00',\n            '08:00',\n            '09:00',\n            '10:00',\n            '11:00',\n            '12:00',\n            '13:00',\n            '14:00',\n            '15:00',\n            '16:00',\n            '17:00',\n            '18:00',\n            '19:00',\n            '20:00',\n            '21:00',\n            '22:00',\n            '23:00',\n            '24:00'\n        ];\n        if (users.length > 0) {\n            users.forEach((user) => {\n                if (user.createdAt) {\n                    const date = new Date(user.createdAt);\n                    if (isToday(date)) {\n                        const index = date.getHours();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n\n\n\n\n    const showWeeklyStats = (users, setterfunction) => {\n        const yaxis = Array(7).fill(0);\n        const xaxis = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        if (users.length > 0) {\n            users.forEach((user) => {\n                if (user.createdAt) {\n                    const date = new Date(user.createdAt);\n                    if (isDateInThisWeek(date)) {\n                        const index = date.getDay();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n                setterfunction(yaxis);\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showMonthlyStats = (users, setterfunction) => {\n        const days = new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n        const yaxis = Array(days).fill(0);\n        const xaxis = Array.from(Array(days + 1).keys());\n        if (users.length > 0) {\n            users.forEach((user) => {\n                if (user.createdAt) {\n                    const date = new Date(user.createdAt);\n                    if (isDayInThisMonth(date)) {\n                        const index = date.getDate();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showYearlyStats = (users, setterfunction) => {\n        const yaxis = Array(12).fill(0);\n        const xaxis = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        if (users.length > 0) {\n            users.forEach((user) => {\n                if (user.createdAt) {\n                    const date = new Date(user.createdAt);\n                    if (isDateInThisMonth(date)) {\n                        const index = date.getMonth();\n                        yaxis[index] = yaxis[index] + 1;\n                        setterfunction(yaxis);\n                    } else {\n                        setterfunction(yaxis);\n                    }\n                }\n                setterfunction(yaxis);\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    useEffect(() => {\n        const newUsers = users.filter((user) => user.newUser === true);\n        if (value === 'today') {\n            showDailyStats(users, setYAxis);\n            showDailyStats(newUsers, setNewUsers);\n            showDailyStats(onlineUsers, setLive);\n\n        } else if (value === 'week') {\n            showWeeklyStats(users, setYAxis);\n            showWeeklyStats(newUsers, setNewUsers);\n            showWeeklyStats(onlineUsers, setLive);\n\n        } else if (value === 'month') {\n            showMonthlyStats(users, setYAxis);\n            showMonthlyStats(newUsers, setNewUsers);\n            showMonthlyStats(onlineUsers, setLive);\n\n        } else {\n            showYearlyStats(users, setYAxis);\n            showYearlyStats(newUsers, setNewUsers);\n            showYearlyStats(onlineUsers, setLive);\n\n        }\n    }, [value]);\n\n    return (\n        <>\n            {isLoading ? (\n                <SkeletonTotalGrowthBarChart />\n            ) : (\n                <MainCard>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                                <Grid item>\n                                    <Grid container direction=\"column\" spacing={1}>\n                                        <Grid item>\n                                            <Typography variant=\"subtitle2\">Total Users</Typography>\n                                        </Grid>\n                                        <Grid item>\n                                            <Typography variant=\"h3\">{users.length}</Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        id=\"standard-select-currency\"\n                                        select\n                                        value={value}\n                                        onChange={(e) => setValue(e.target.value)}\n                                    >\n                                        {status.map((option) => (\n                                            <MenuItem key={option.value} value={option.value}>\n                                                {option.label}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Chart\n                                height={chartData.height}\n                                type={chartData.type}\n                                options={{\n                                    ...chartData.options,\n                                    title: {\n                                        text: \"Users Chart\",\n                                        align: 'center',\n                                        style: {\n                                            fontSize: '20px',\n                                            fontWeight: 600,\n                                            fontFamily: \"'Roboto',sans-serif\",\n                                            color: \"#2196f3\"\n                                        },\n                                    },\n                                    chart: {\n                                        stacked: true,\n                                        toolbar: {\n                                            show: true,\n                                            export: {\n                                                csv: {\n                                                    filename: 'Users Data',\n                                                },\n                                                svg: {\n                                                    filename: 'Users Data'\n                                                },\n                                                png: {\n                                                    filename: 'Users Data',\n                                                }\n                                            }\n                                        },\n                                        zoom: {\n                                            enabled: true\n                                        }\n                                    },\n                                    xaxis: {\n                                        type: 'category',\n                                        categories: xAxis\n                                    },\n                                    xaxis: {\n                                        type: 'category',\n                                        categories: xAxis,\n                                        labels: { show: true },\n                                        title: {\n                                            text: `${value === 'today' ? \"Time\" : value === \"week\" ? \"Day\" : value === \"month\" ? \"Date\" : \"Month\"\n                                                }`, style: {\n                                                    fontSize: '15px',\n                                                    fontFamily: \"'Roboto',sans-serif\",\n                                                    fontWeight: 600,\n\n                                                },\n                                        },\n                                    },\n                                    yaxis: {\n                                        show: true,\n                                        showAlways: true, labels: { show: true }, title: {\n                                            text: \"Users\", style: {\n                                                fontSize: '15px',\n                                                fontFamily: \"'Roboto',sans-serif\",\n                                                fontWeight: 600,\n\n                                            },\n                                        }\n                                    }\n                                }}\n                                series={[{ name: 'Users', data: yAxis },\n                                { name: 'New Users', data: newUsers },\n                                { name: 'Online Users', data: live },\n\n                                ]}\n                            />\n                        </Grid>\n                    </Grid>\n                </MainCard>\n            )}\n        </>\n    );\n};\n\nexport default UserChart;\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material';\nimport ApexCharts from 'apexcharts';\nimport Chart from 'react-apexcharts';\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant';\nimport chartData from './chart-data/total-growth-bar-chart';\n\nconst status = [\n    {\n        value: 'today',\n        label: 'Today'\n    },\n    {\n        value: 'week',\n        label: 'This Week'\n    },\n    {\n        value: 'month',\n        label: 'This Month'\n    },\n    {\n        value: 'year',\n        label: 'This Year'\n    }\n];\n\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\n\nconst LeagueChart = ({ isLoading, leagues }) => {\n    const [value, setValue] = useState('today');\n    const theme = useTheme();\n    const customization = useSelector((state) => state.customization);\n    const [xAxis, setxAxis] = useState([]);\n    const [yAxis, setYAxis] = useState([]);\n    const [activeXAxis, setActiveXAxis] = useState([]);\n    const [activeYAxis, setActiveYAxis] = useState([]);\n    const { navType } = customization;\n    const { primary } = theme.palette.text;\n    const darkLight = theme.palette.dark.light;\n    const grey200 = theme.palette.grey[200];\n    const grey500 = theme.palette.grey[500];\n    const primary200 = theme.palette.primary[200];\n    const primaryDark = theme.palette.primary.dark;\n    const secondaryMain = theme.palette.secondary.main;\n    const secondaryLight = theme.palette.secondary.light;\n\n    useEffect(() => {\n        const newChartData = {\n            ...chartData.options,\n            colors: [primary200, primaryDark, secondaryMain, secondaryLight],\n            xaxis: {\n                labels: {\n                    style: {\n                        colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n                    }\n                }\n            },\n            yaxis: {\n                labels: {\n                    style: {\n                        colors: [primary]\n                    }\n                }\n            },\n            grid: {\n                borderColor: grey200\n            },\n            tooltip: {\n                theme: 'light'\n            },\n            legend: {\n                labels: {\n                    colors: grey500\n                }\n            }\n        };\n\n        // do not load chart when loading\n        if (!isLoading) {\n            ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\n        }\n    }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\n\n    // check if date is of today\n    const isToday = (dateParameter) => {\n        const today = new Date();\n        return (\n            dateParameter.getDate() === today.getDate() &&\n            dateParameter.getMonth() === today.getMonth() &&\n            dateParameter.getFullYear() === today.getFullYear()\n        );\n    };\n\n    // check if date is in week\n    function isDateInThisWeek(date) {\n        const todayObj = new Date();\n        const todayDate = todayObj.getDate();\n        const todayDay = todayObj.getDay();\n        const firstDayOfWeek = new Date(todayObj.setDate(todayDate - todayDay));\n        const lastDayOfWeek = new Date(firstDayOfWeek);\n        lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);\n        return date >= firstDayOfWeek && date <= lastDayOfWeek;\n    }\n\n    function isDateInThisMonth(dateParameter) {\n        const today = new Date();\n        return dateParameter.getFullYear() === today.getFullYear();\n    }\n\n    function isDayInThisMonth(dateParameter) {\n        const today = new Date();\n\n        return dateParameter.getMonth() === today.getMonth() && dateParameter.getFullYear() === today.getFullYear();\n    }\n\n    const showDailyStats = () => {\n        const yaxis = Array(24).fill(0);\n        const xaxis = [\n            '00:00',\n            '01:00',\n            '02:00',\n            '03:00',\n            '04:00',\n            '05:00',\n            '06:00',\n            '07:00',\n            '08:00',\n            '09:00',\n            '10:00',\n            '11:00',\n            '12:00',\n            '13:00',\n            '14:00',\n            '15:00',\n            '16:00',\n            '17:00',\n            '18:00',\n            '19:00',\n            '20:00',\n            '21:00',\n            '22:00',\n            '23:00',\n            '24:00'\n        ];\n        if (leagues.length > 0) {\n            leagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isToday(date)) {\n                        const index = date.getHours();\n                        yaxis[index] = yaxis[index] + 1;\n                        setYAxis(yaxis);\n                    } else {\n                        setYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showDailyActiveStats = () => {\n        const activeLeagues = leagues.filter((league) => league.status === 'Active');\n        const yaxis = Array(24).fill(0);\n        const xaxis = [\n            '00:00',\n            '01:00',\n            '02:00',\n            '03:00',\n            '04:00',\n            '05:00',\n            '06:00',\n            '07:00',\n            '08:00',\n            '09:00',\n            '10:00',\n            '11:00',\n            '12:00',\n            '13:00',\n            '14:00',\n            '15:00',\n            '16:00',\n            '17:00',\n            '18:00',\n            '19:00',\n            '20:00',\n            '21:00',\n            '22:00',\n            '23:00',\n            '24:00'\n        ];\n        if (activeLeagues.length > 0) {\n            activeLeagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isToday(date)) {\n                        const index = date.getHours();\n                        yaxis[index] = yaxis[index] + 1;\n                        setActiveYAxis(yaxis);\n                    } else {\n                        setActiveYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showWeeklyStats = () => {\n        const yaxis = Array(7).fill(0);\n        const xaxis = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        if (leagues.length > 0) {\n            leagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isDateInThisWeek(date)) {\n                        const index = date.getDay();\n                        yaxis[index] = yaxis[index] + 1;\n                        setYAxis(yaxis);\n                    } else {\n                        setYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showWeeklyActiveStats = () => {\n        const activeLeagues = leagues.filter((league) => league.status === 'Active');\n        const yaxis = Array(7).fill(0);\n        const xaxis = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        if (activeLeagues.length > 0) {\n            activeLeagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isDateInThisWeek(date)) {\n                        const index = date.getDay();\n                        yaxis[index] = yaxis[index] + 1;\n                        setActiveYAxis(yaxis);\n                    } else {\n                        setActiveYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showMonthlyStats = () => {\n        const days = new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n        const yaxis = Array(days).fill(0);\n        const xaxis = Array.from(Array(days + 1).keys());\n        if (leagues.length > 0) {\n            leagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isDayInThisMonth(date)) {\n                        const index = date.getDate();\n                        yaxis[index] = yaxis[index] + 1;\n                        setYAxis(yaxis);\n                    } else {\n                        setYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showMonthlyActiveStats = () => {\n        const activeLeagues = leagues.filter((league) => league.status === 'Active');\n        const days = new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n        const yaxis = Array(days).fill(0);\n        const xaxis = Array.from(Array(days + 1).keys());\n        if (activeLeagues.length > 0) {\n            activeLeagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isDayInThisMonth(date)) {\n                        const index = date.getDate();\n                        yaxis[index] = yaxis[index] + 1;\n                        setActiveYAxis(yaxis);\n                    } else {\n                        setActiveYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showYearlyStats = () => {\n        const yaxis = Array(12).fill(0);\n        const xaxis = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        if (leagues.length > 0) {\n            leagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isDateInThisMonth(date)) {\n                        const index = date.getMonth();\n                        yaxis[index] = yaxis[index] + 1;\n                        setYAxis(yaxis);\n                    } else {\n                        setYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    const showYearlyActiveStats = () => {\n        const activeLeagues = leagues.filter((league) => league.status === 'Active');\n        console.log({ activeLeagues });\n        const yaxis = Array(12).fill(0);\n        const xaxis = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        if (activeLeagues.length > 0) {\n            activeLeagues.forEach((league) => {\n                if (league.createdAt) {\n                    const date = new Date(league.createdAt);\n                    if (isDateInThisMonth(date)) {\n                        const index = date.getMonth();\n                        yaxis[index] = yaxis[index] + 1;\n                        setActiveYAxis(yaxis);\n                    } else {\n                        setActiveYAxis(yaxis);\n                    }\n                }\n            });\n        }\n        setxAxis(xaxis);\n    };\n\n    useEffect(() => {\n        if (value === 'today') {\n            showDailyStats();\n            showDailyActiveStats();\n        } else if (value === 'week') {\n            showWeeklyStats();\n            showWeeklyActiveStats();\n        } else if (value === 'month') {\n            showMonthlyStats();\n            showMonthlyActiveStats();\n        } else {\n            showYearlyStats();\n            showYearlyActiveStats();\n        }\n    }, [value]);\n\n    return (\n        <>\n            {isLoading ? (\n                <SkeletonTotalGrowthBarChart />\n            ) : (\n                <MainCard>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                                <Grid item>\n                                    <Grid container direction=\"column\" spacing={1}>\n                                        <Grid item>\n                                            <Typography variant=\"subtitle2\">Total Leagues</Typography>\n                                        </Grid>\n                                        <Grid item>\n                                            <Typography variant=\"h3\">{leagues.length}</Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        id=\"standard-select-currency\"\n                                        select\n                                        value={value}\n                                        onChange={(e) => setValue(e.target.value)}\n                                    >\n                                        {status.map((option) => (\n                                            <MenuItem key={option.value} value={option.value}>\n                                                {option.label}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Chart\n                                height={chartData.height}\n                                type={chartData.type}\n                                options={{\n                                    ...chartData.options,\n                                    title: {\n                                        text: \"Leagues Chart\",\n                                        align: 'center',\n                                        style: {\n                                            fontSize: '20px',\n                                            fontWeight: 600,\n                                            fontFamily: \"'Roboto',sans-serif\",\n                                            color: \"#2196f3\"\n                                        },\n                                    },\n                                    chart: {\n                                        stacked: true,\n                                        toolbar: {\n                                            show: true,\n                                            export: {\n                                                csv: {\n                                                    filename: 'Leagues Data'\n                                                },\n                                                svg: {\n                                                    filename: 'Leagues Data'\n                                                },\n                                                png: {\n                                                    filename: 'Leagues Data'\n                                                }\n                                            }\n                                        },\n                                        zoom: {\n                                            enabled: true\n                                        }\n                                    },\n                                    xaxis: {\n                                        type: 'category',\n                                        categories: xAxis,\n                                        labels: { show: true },\n                                        title: {\n                                            text: `${value === 'today' ? \"Time\" : value === \"week\" ? \"Day\" : value === \"month\" ? \"Date\" : \"Month\"\n                                                }`, style: {\n                                                    fontSize: '15px',\n                                                    fontFamily: \"'Roboto',sans-serif\",\n                                                    fontWeight: 600,\n\n                                                },\n                                        },\n                                    },\n                                    yaxis: {\n                                        show: true,\n                                        showAlways: true, labels: { show: true }, title: {\n                                            text: \"Leagues\", style: {\n                                                fontSize: '15px',\n                                                fontFamily: \"'Roboto',sans-serif\",\n                                                fontWeight: 600,\n\n                                            },\n                                        }\n                                    }\n                                }}\n                                series={[\n                                    { name: 'Leagues', data: yAxis },\n                                    { name: 'Active Leagues', data: activeYAxis }\n                                ]}\n                            />\n                        </Grid>\n                    </Grid>\n                </MainCard>\n            )}\n        </>\n    );\n};\n\nexport default LeagueChart;\n","import { useEffect, useState } from 'react';\nimport { Grid } from '@mui/material';\nimport TotalOrderLineChartCard from './TotalOrderLineChartCard';\nimport TotalIncomeDarkCard from './TotalIncomeDarkCard';\nimport TotalIncomeLightCard from './TotalIncomeLightCard';\nimport { gridSpacing } from 'store/constant';\nimport firebase from '../../../frebase/firebase';\nimport QuizChart from './quizchart';\nimport UserChart from './userchart';\nimport LeaguesChart from './leaguesChart';\n\nconst Dashboard = () => {\n    const [privateLeagues, setPrivateLeagues] = useState([]);\n    const [publicLeagues, setPublicLeagues] = useState([]);\n    const [leagues, setLeagues] = useState([]);\n    const [quizes, setQuizes] = useState([]);\n    const [users, setUsers] = useState([]);\n    const [mode, setMode] = useState('');\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const [onlineUsersSum, setOnlineUsersSum] = useState(0);\n\n    useEffect(() => {\n        getPrivateLeagues();\n        getPublicLeagues();\n        getLeagues();\n        getQuizzes();\n        getUsers();\n    }, []);\n\n    useEffect(() => {\n        const subscription = firebase\n            .firestore()\n            .collection('Lobby')\n            .onSnapshot(async (snap) => {\n                const lobbies = snap.docs.map((doc) => doc.data());\n                const sum = lobbies\n                    .map((lobby) => {\n                        if (lobby?.numOfPlayerInQuiz) {\n                            return lobby?.numOfPlayerInQuiz;\n                        } else {\n                            return 0;\n                        }\n                    })\n                    .reduce((a, b) => a + b);\n                setOnlineUsersSum(sum);\n            });\n\n        firebase\n            .firestore()\n            .collection('Quizzes')\n            .where('type', '==', 'Live Quiz')\n            .get()\n            .then(async (snap) => {\n                const quizzes = snap.docs.map((doc) => doc.data());\n                const users = await getUsers();\n                const filterLiveUsers = (userId) => {\n                    const filteredUsers = users.filter((user) => user.uid == userId);\n                    if (filteredUsers.length > 0) {\n                        return filteredUsers[0];\n                    } else return null;\n                };\n\n                let allUsers = [];\n                quizzes.forEach((quiz) => {\n                    if (quiz.createdBy) {\n                        const result = filterLiveUsers(quiz.createdBy);\n                        if (result) {\n                            allUsers.push(result);\n                        }\n                    }\n                });\n\n                const filteredArray = allUsers.filter((obj, index) => {\n                    return (\n                        index ===\n                        allUsers.findIndex((item) => {\n                            return JSON.stringify(item) === JSON.stringify(obj);\n                        })\n                    );\n                });\n                console.log('online', filteredArray);\n\n                setOnlineUsers(filteredArray);\n            })\n            .catch((err) => console.log(err));\n\n        return () => subscription();\n    }, []);\n\n    const getPrivateLeagues = () => {\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .where('leagueType', '==', 'private')\n            .where('isRejected', '==', false)\n            .get()\n            .then((league) => {\n                const leagues = league.docs.map((doc) => doc.data());\n                setPrivateLeagues(leagues);\n            })\n            .catch((err) => console.log(err));\n    };\n    const getPublicLeagues = () => {\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .get()\n            .then((league) => {\n                const leagues = league.docs.map((doc) => doc.data());\n                const publicLeagues = leagues.filter((league) => league.leagueType !== 'private');\n                setPublicLeagues(publicLeagues);\n            })\n            .catch((err) => console.log(err));\n    };\n    const getLeagues = () => {\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .get()\n            .then((league) => {\n                const leagues = league.docs.map((doc) => doc.data());\n                setLeagues(leagues);\n            })\n            .catch((err) => console.log(err));\n    };\n    const getQuizzes = () => {\n        const ref = firebase.firestore();\n        ref.collection('Quizzes')\n            .get()\n            .then((quiz) => {\n                const quizes = quiz.docs.map((doc) => doc.data());\n                setQuizes(quizes);\n            })\n            .catch((err) => console.log(err));\n    };\n\n    const getUsers = async () => {\n        try {\n            const ref = firebase.firestore().collection('Users');\n            const users = (await ref.get()).docs.map((doc) => doc.data()).filter((user) => !user.isAdmin);\n            setUsers(users);\n            return users;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const renderChart = () => {\n        if (mode === 'quizes') {\n            if (quizes.length > 0) {\n                return <QuizChart isLoading={false} quizes={quizes} />;\n            }\n        } else if (mode === 'leagues') {\n            if (leagues.length > 0) {\n                return <LeaguesChart isLoading={false} leagues={leagues} />;\n            }\n        } else {\n            if (users.length > 0) {\n                return <UserChart isLoading={false} users={users} onlineUsers={onlineUsers} />;\n            }\n        }\n    };\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item lg={4} md={6} sm={6} xs={12}>\n                        <TotalOrderLineChartCard\n                            toogleMode={(mode) => setMode(mode)}\n                            btn1={quizes.length}\n                            btn2={leagues.length}\n                            btn1Text=\"Standalone Quiz\"\n                            btn2Text=\"League Quiz\"\n                            cardText=\"Quizzes\"\n                            isLoading={quizes.length > 0 ? false : true}\n                        />\n                    </Grid>\n                    <Grid item lg={4} md={6} sm={6} xs={12}>\n                        <TotalOrderLineChartCard\n                            toogleMode={(mode) => setMode(mode)}\n                            isLoading={publicLeagues.length > 0 ? false : true}\n                            btn1={privateLeagues.length}\n                            btn2={publicLeagues.length}\n                            btn1Text=\"Private Leagues\"\n                            btn2Text=\"Public Leagues\"\n                            cardText=\"Leagues\"\n                        />\n                    </Grid>\n                    <Grid item lg={4} md={12} sm={12} xs={12}>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item sm={6} xs={12} md={6} lg={12}>\n                                <TotalIncomeDarkCard\n                                    isLoading={users.length > 0 ? false : true}\n                                    users={users}\n                                    onlineUsers={onlineUsers.length ?? 0}\n                                    toogleMode={(mode) => setMode(mode)}\n                                />\n                            </Grid>\n                            <Grid item sm={6} xs={12} md={6} lg={12}>\n                                <TotalIncomeLightCard isLoading={false} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs={12} md={8}>\n                        {renderChart()}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Dashboard;\n"],"names":["container","direction","item","justifyContent","variant","width","height","sx","my","CardWrapper","styled","MainCard","theme","backgroundColor","palette","primary","dark","cursor","color","overflow","position","zIndex","content","background","borderRadius","top","right","breakpoints","down","opacity","isLoading","btn1","btn2","btn1Text","btn2Text","cardText","toogleMode","useTheme","useState","timeValue","setTimeValue","handleChangeTime","event","newValue","console","log","border","Box","p","onClick","Grid","Avatar","typography","commonAvatar","largeAvatar","mt","fontSize","Button","disableElevation","size","e","mb","alignItems","xs","Typography","fontWeight","mr","Card","List","py","ListItem","disableGutters","ListItemAvatar","Skeleton","ListItemText","secondary","light","users","onlineUsers","PersonOutline","length","filter","user","newUser","warning","StorefrontTwoTone","grey","CardContent","spacing","gridSpacing","zeroMinWidth","type","options","responsive","breakpoint","legend","offsetX","offsetY","plotOptions","bar","horizontal","columnWidth","show","fontFamily","labels","useSeriesColors","markers","radius","itemMargin","vertical","fill","dataLabels","enabled","grid","status","value","label","quizes","setValue","customization","useSelector","state","xAxis","setxAxis","scheduled","setScheduled","playAt","setPlayAt","quiz","live","setLive","yAxis","setYAxis","navType","text","darkLight","grey200","grey500","primary200","primaryDark","secondaryMain","main","secondaryLight","useEffect","newChartData","chartData","colors","xaxis","style","yaxis","borderColor","tooltip","ApexCharts","showDailyStats","quizzes","setterfunction","Array","forEach","createdAt","date","Date","dateParameter","today","getDate","getMonth","getFullYear","isToday","index","getHours","showWeeklyStats","todayObj","todayDate","todayDay","getDay","firstDayOfWeek","setDate","lastDayOfWeek","isDateInThisWeek","showMonthlyStats","days","from","keys","isDayInThisMonth","showYearlyStats","isDateInThisMonth","liveQuiz","scheduledQuiz","playAtQuiz","TextField","id","select","onChange","target","map","option","MenuItem","title","align","chart","stacked","toolbar","export","csv","filename","svg","png","zoom","categories","showAlways","series","name","data","newUsers","setNewUsers","leagues","activeYAxis","setActiveYAxis","league","activeLeagues","showDailyActiveStats","showWeeklyActiveStats","showMonthlyActiveStats","showYearlyActiveStats","privateLeagues","setPrivateLeagues","publicLeagues","setPublicLeagues","setLeagues","setQuizes","setUsers","mode","setMode","setOnlineUsers","setOnlineUsersSum","getPrivateLeagues","getPublicLeagues","getLeagues","getQuizzes","getUsers","subscription","firebase","collection","onSnapshot","snap","lobbies","docs","doc","sum","lobby","numOfPlayerInQuiz","reduce","a","b","where","get","then","filterLiveUsers","userId","filteredUsers","uid","allUsers","createdBy","result","push","filteredArray","obj","findIndex","JSON","stringify","catch","err","leagueType","ref","isAdmin","lg","md","sm","renderChart"],"sourceRoot":""}