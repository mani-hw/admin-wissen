{"version":3,"file":"static/js/380.ea2b8a26.chunk.js","mappings":"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","sources":["views/users/blacklisted-users.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport UsersTable from 'shared/usersTable';\nimport MainCard from 'ui-component/cards/MainCard';\nimport firebase from '../../frebase/firebase';\n\nconst columns = [\n    {\n        name: 'User Name'\n    },\n    {\n        name: 'Email'\n    },\n    {\n        name: 'Location'\n    },\n    {\n        name: 'User Role'\n    },\n    {\n        name: 'Blocked Reason'\n    },\n    {\n        name: 'Actions'\n    }\n];\n\nconst BlackListedUsers = () => {\n    const [tableData, setTableData] = useState([]);\n    const [lastDoc, setLastDoc] = useState();\n    const [firstDoc, setFirstDoc] = useState();\n    const [page, setPage] = useState(0);\n    const [length, setLength] = useState(0);\n    const [loading, setLoading] = useState(false);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const ref = firebase.firestore().collection('Users');\n    async function getUsers(limit = rowsPerPage) {\n        setLoading(true);\n        ref.orderBy('createdAt', 'desc')\n            .limit(limit)\n            .where('isBlocked', '==', true)\n            .get()\n            .then((user) => {\n                const users = user.docs.map((doc) => doc.data());\n                const doc = user.docs[user.docs.length - 1];\n                setLastDoc(doc);\n                setTableData(users);\n                setLoading(false);\n            });\n        const count = (await ref.where('isBlocked', '==', true).get()).docs.length;\n        setLength(count);\n    }\n\n    const handleChangePage = (event, newPage) => {\n        setLoading(true);\n        const previousPage = page;\n        setPage(newPage);\n        if (newPage > previousPage) {\n            ref.orderBy('createdAt', 'desc')\n                .limit(rowsPerPage)\n                .startAfter(lastDoc)\n                .where('isBlocked', '==', true)\n                .get()\n                .then((user) => {\n                    const users = user.docs.map((doc) => doc.data());\n                    const ldoc = user.docs[user.docs.length - 1];\n                    const fdoc = user.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setTableData(users);\n                    setLoading(false);\n                });\n        } else {\n            ref.orderBy('createdAt', 'desc')\n                .limitToLast(rowsPerPage + 1)\n                .endBefore(firstDoc)\n                .where('isBlocked', '==', true)\n                .get()\n                .then((user) => {\n                    const users = user.docs.map((doc) => doc.data());\n                    const ldoc = user.docs[user.docs.length - 1];\n                    const fdoc = user.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setTableData(users);\n                    setLoading(false);\n                });\n        }\n    };\n\n    const handleChangeRowsPerPage = async (event) => {\n        try {\n            await getUsers(event.target.value);\n            setRowsPerPage(event.target.value);\n            setPage(0);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        getUsers();\n    }, []);\n\n    return (\n        <MainCard title=\"BlackListed Users\">\n            <UsersTable\n                columns={columns}\n                data={tableData && tableData}\n                setTableData={setTableData}\n                type=\"BlackListed\"\n                page={page}\n                setPage={setPage}\n                handleChangePage={handleChangePage}\n                length={length}\n                setLoading={setLoading}\n                loading={loading}\n                rowsPerPage={rowsPerPage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default BlackListedUsers;\n"],"names":["columns","name","useState","tableData","setTableData","lastDoc","setLastDoc","firstDoc","setFirstDoc","page","setPage","length","setLength","loading","setLoading","rowsPerPage","setRowsPerPage","ref","firebase","collection","getUsers","limit","orderBy","where","get","then","user","users","docs","map","doc","data","count","handleChangeRowsPerPage","event","target","value","console","log","useEffect","title","type","handleChangePage","newPage","previousPage","startAfter","ldoc","fdoc","limitToLast","endBefore"],"sourceRoot":""}