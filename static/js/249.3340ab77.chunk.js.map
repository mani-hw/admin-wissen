{"version":3,"file":"static/js/249.3340ab77.chunk.js","mappings":"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","sources":["shared/leaguesTable.js","views/private-leagues/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport {\n    Button,\n    Popover,\n    TextField,\n    Chip,\n    Dialog,\n    DialogActions,\n    Stack,\n    DialogTitle,\n    DialogContent,\n    TablePagination,\n    Grid,\n    Autocomplete\n} from '@mui/material';\nimport { Delete, Edit } from '@mui/icons-material';\nimport moment from 'moment';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { CSVLink } from 'react-csv';\n\nexport default function LeaguesTable(props) {\n    const {\n        data,\n        columns,\n        users,\n        type,\n        assignQuizzMaster,\n        handleClick,\n        anchorEl,\n        popType,\n        unAssignQuizzMaster,\n        handleClose,\n        element,\n        setElement,\n        updateRow,\n        deteleteRow,\n        inviteUsers,\n        masters,\n        length,\n        handleChangeRowsPerPage,\n        rowsPerPage,\n        page,\n        handleChangePage,\n        getLeagues\n    } = props;\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n    const [userList, setUserList] = useState([]);\n    const [csvModal, setCsvModal] = React.useState(false);\n    const [startDate, setStartDate] = React.useState('');\n    const [endDate, setEndDate] = React.useState('');\n    const [startDateError, setStartDateError] = React.useState('');\n    const [endDateError, setEndDateError] = React.useState('');\n    const [leagues, setLeagues] = React.useState([]);\n    const [invitedUserList, setInvitedUserList] = React.useState('');\n    const navigate = useNavigate();\n    const csvButtonRef = React.useRef();\n\n    useEffect(() => {\n        if (popType == 'invite') {\n            setUserList(inviteUsers);\n        } else {\n            setUserList(users);\n        }\n    }, [popType]);\n\n    const exportCsv = () => {\n        try {\n            if (startDate.length === 0) {\n                setStartDateError(true);\n                return;\n            }\n            if (endDate.length === 0) {\n                setEndDateError(true);\n                return;\n            }\n            const unixStartDate = moment(startDate).valueOf();\n            const unixEndDate = moment(endDate).valueOf();\n            const leagues = data\n                .filter((league) => league.createdAt >= unixStartDate && league.createdAt <= unixEndDate)\n                .map((league) => ({\n                    'League Name': league.title,\n                    'No. of Quizzes': league?.quizzes ? league?.quizzes?.length : 0,\n                    'Quiz Master': league.quizzmaster && league.quizzmaster ? league.quizzmaster : 'Not yet',\n                    'Created By': league.organizer ? league.organizer : league.ContactInfo.firstName,\n                    'Created On': moment(league.createdAt).fromNow(),\n                    Status: league.status\n                }));\n            setLeagues(leagues);\n            csvButtonRef.current.link.click();\n            closeCsvModal();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const closeCsvModal = () => {\n        setStartDate('');\n        setEndDate('');\n        setStartDateError(false);\n        setEndDateError(false);\n        setCsvModal(false);\n    };\n\n    // const inviteAllQuizMasters = async (quizzmasters) => {\n    //     try {\n    //         for (const quizzmaster of quizzmasters) {\n    //             await assignQuizzMaster(quizzmaster);\n    //         }\n    //         handleClose();\n    //         getLeagues();\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // };\n\n    const closePopUp = () => {\n        handleClose();\n        setInvitedUserList('');\n    };\n\n    return (\n        <div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <Button component={Link} to=\"/leaguesform\" variant=\"outlined\" color=\"inherit\" disableElevation>\n                    {type === 'private' ? 'Create Private League' : 'Create Public League'}\n                </Button>\n                <Button variant=\"outlined\" color=\"info\" sx={{ float: 'right' }} onClick={() => setCsvModal(true)}>\n                    Export\n                </Button>\n            </div>\n\n            <Paper Paper style={{ overflow: 'auto' }}>\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"simple table\" size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((col, index) => (\n                                    <TableCell\n                                        align=\"center\"\n                                        key={index}\n                                        style={{ whiteSpace: 'nowrap' }}\n                                        width={col.name === 'Actions' ? '20%' : '10%'}\n                                    >\n                                        {col.name}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {data.map((row, i) => {\n                                return (\n                                    <TableRow key={i}>\n                                        <TableCell align=\"center\" component=\"th\" scope=\"row\" width=\"10%\">\n                                            <Button\n                                                variant=\"text\"\n                                                onClick={() => {\n                                                    navigate(`/quizzes?league=${row.id}`);\n                                                }}\n                                            >\n                                                {row.title}\n                                            </Button>\n                                        </TableCell>\n                                        <TableCell align=\"center\" component=\"th\" scope=\"row\" width=\"10%\">\n                                            {row?.quizzes ? row?.quizzes?.length : 0}\n                                        </TableCell>\n                                        <TableCell align=\"center\" component=\"th\" scope=\"row\" width=\"10%\">\n                                            <Chip\n                                                label={row.createdByName ? row.createdByName : 'Not yet'}\n                                                color={row.createdByName ? 'success' : 'primary'}\n                                            />\n                                        </TableCell>\n                                        <TableCell align=\"center\" component=\"th\" scope=\"row\" width=\"10%\">\n                                            {row.organizer ? row.organizer : row?.ContactInfo?.firstName ?? ''}\n                                        </TableCell>\n                                        <TableCell align=\"center\" component=\"th\" scope=\"row\" width=\"10%\">\n                                            {moment(row.createdAt).fromNow()}\n                                        </TableCell>\n                                        <TableCell align=\"center\" component=\"th\" scope=\"row\" width=\"10%\">\n                                            {row.status}\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" component=\"td\" width=\"40%\">\n                                            <div width={200}>\n                                                <Popover\n                                                    id={id}\n                                                    open={open}\n                                                    anchorEl={true}\n                                                    onClose={closePopUp}\n                                                    anchorOrigin={{\n                                                        vertical: 'center',\n                                                        horizontal: 'center'\n                                                    }}\n                                                >\n                                                    <div\n                                                        style={{\n                                                            padding: '1rem',\n                                                            display: 'flex',\n                                                            flexDirection: 'column',\n                                                            justifyContent: 'center',\n                                                            overflowY: popType == 'quizzmaster' || (popType == 'invite' && 'scroll')\n                                                        }}\n                                                    >\n                                                        {popType == 'delete' || popType == 'unAssign' ? (\n                                                            <h3>Are you sure?</h3>\n                                                        ) : popType == 'update' ? (\n                                                            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                                                                <TextField\n                                                                    id=\"outlined-basic\"\n                                                                    size=\"small\"\n                                                                    label=\"laegue Title?\"\n                                                                    variant=\"outlined\"\n                                                                    value={element?.title}\n                                                                    style={{ paddingBottom: '1rem' }}\n                                                                    onChange={(e) => setElement({ ...element, title: e.target.value })}\n                                                                />\n                                                                <TextField\n                                                                    id=\"outlined-basic\"\n                                                                    size=\"small\"\n                                                                    label=\"Organizer?\"\n                                                                    variant=\"outlined\"\n                                                                    value={\n                                                                        element?.organizer\n                                                                            ? element?.organizer\n                                                                            : element?.ContactInfo?.firstName\n                                                                    }\n                                                                    style={{ paddingBottom: '1rem' }}\n                                                                    onChange={(e) => setElement({ ...element, organizer: e.target.value })}\n                                                                />\n                                                                <TextField\n                                                                    id=\"outlined-basic\"\n                                                                    size=\"small\"\n                                                                    label=\"About?\"\n                                                                    variant=\"outlined\"\n                                                                    value={element?.description}\n                                                                    style={{ paddingBottom: '1rem' }}\n                                                                    onChange={(e) =>\n                                                                        setElement({ ...element, description: e.target.value })\n                                                                    }\n                                                                />\n                                                                <TextField\n                                                                    id=\"outlined-basic\"\n                                                                    size=\"small\"\n                                                                    label=\"Status?\"\n                                                                    variant=\"outlined\"\n                                                                    value={element?.status}\n                                                                    style={{ paddingBottom: '1rem' }}\n                                                                    onChange={(e) => setElement({ ...element, status: e.target.value })}\n                                                                />\n                                                            </Stack>\n                                                        ) : popType === 'invite' ? (\n                                                            <Grid container sx={{ height: '300px' }}>\n                                                                <Grid item sm={12}>\n                                                                    <Autocomplete\n                                                                        disablePortal\n                                                                        sx={{ width: 300 }}\n                                                                        value={invitedUserList}\n                                                                        options={userList.map((user) => ({\n                                                                            label: `${user.firstName} ${user.lastName}`,\n                                                                            value: user.uid\n                                                                        }))}\n                                                                        onChange={(event, newValue) => {\n                                                                            setInvitedUserList(newValue);\n                                                                        }}\n                                                                        renderInput={(params) => (\n                                                                            <TextField {...params} label=\"Select Users\" margin=\"normal\" />\n                                                                        )}\n                                                                    />\n                                                                </Grid>\n                                                            </Grid>\n                                                        ) : (\n                                                            <Grid container sx={{ height: '300px' }}>\n                                                                <Grid item sm={12}>\n                                                                    <Autocomplete\n                                                                        disablePortal\n                                                                        sx={{ width: 300 }}\n                                                                        value={invitedUserList}\n                                                                        options={masters.map((user) => ({\n                                                                            label: `${user.firstName} ${user.lastName}`,\n                                                                            value: user.uid\n                                                                        }))}\n                                                                        onChange={(event, newValue) => {\n                                                                            setInvitedUserList(newValue);\n                                                                        }}\n                                                                        renderInput={(params) => (\n                                                                            <TextField {...params} label=\"Select Users\" margin=\"normal\" />\n                                                                        )}\n                                                                    />\n                                                                </Grid>\n                                                            </Grid>\n                                                        )}\n                                                        <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"flex-end\">\n                                                            {popType !== 'quizzmaster' && (\n                                                                <Button\n                                                                    variant=\"outlined\"\n                                                                    size=\"medium\"\n                                                                    color=\"info\"\n                                                                    onClick={\n                                                                        popType == 'update'\n                                                                            ? updateRow\n                                                                            : popType == 'delete'\n                                                                            ? deteleteRow\n                                                                            : unAssignQuizzMaster\n                                                                    }\n                                                                >\n                                                                    {popType == 'update'\n                                                                        ? 'Update'\n                                                                        : popType == 'invite'\n                                                                        ? 'Invite'\n                                                                        : 'Confirm'}\n                                                                </Button>\n                                                            )}\n                                                            {popType === 'quizzmaster' && (\n                                                                <Button\n                                                                    variant=\"outlined\"\n                                                                    size=\"medium\"\n                                                                    onClick={() => {\n                                                                        assignQuizzMaster(invitedUserList);\n                                                                        setInvitedUserList('');\n                                                                    }}\n                                                                >\n                                                                    Invite\n                                                                </Button>\n                                                            )}\n\n                                                            <Button variant=\"outlined\" size=\"medium\" color=\"error\" onClick={closePopUp}>\n                                                                Cancel\n                                                            </Button>\n                                                        </Stack>\n                                                    </div>\n                                                </Popover>\n                                                <div\n                                                    style={{\n                                                        width: '350px',\n                                                        justifyContent: 'space-between',\n                                                        alignItems: 'center',\n                                                        display: 'flex'\n                                                    }}\n                                                >\n                                                    <Button\n                                                        color=\"info\"\n                                                        variant=\"outlined\"\n                                                        size=\"small\"\n                                                        onClick={(e) => handleClick(e, 'update', i)}\n                                                    >\n                                                        <Edit />\n                                                    </Button>\n                                                    &nbsp;&nbsp;&nbsp;\n                                                    <Button\n                                                        color=\"error\"\n                                                        variant=\"outlined\"\n                                                        size=\"small\"\n                                                        onClick={(e) => handleClick(e, 'delete', i)}\n                                                    >\n                                                        <Delete />\n                                                    </Button>\n                                                    &nbsp;&nbsp;&nbsp;\n                                                    <Button\n                                                        key={i}\n                                                        color={row.createdBy && row.createdBy ? 'success' : 'inherit'}\n                                                        variant=\"outlined\"\n                                                        size=\"small\"\n                                                        onClick={(e) => {\n                                                            row.createdBy && row.createdBy\n                                                                ? handleClick(e, 'unAssign', i)\n                                                                : handleClick(e, 'quizzmaster', i);\n                                                        }}\n                                                    >\n                                                        {row.createdBy && row.createdBy ? 'Unassign' : 'Assign QM'}\n                                                    </Button>\n                                                    &nbsp;&nbsp;&nbsp;\n                                                    {type == 'public' && (\n                                                        <Button\n                                                            color=\"error\"\n                                                            variant=\"outlined\"\n                                                            size=\"small\"\n                                                            onClick={(e) => handleClick(e, 'invite', i)}\n                                                        >\n                                                            Invite Users\n                                                        </Button>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <TablePagination\n                    rowsPerPageOptions={[10, 25]}\n                    component=\"div\"\n                    count={length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n            {/* csv dialogue */}\n\n            <Dialog\n                open={csvModal}\n                onClose={closeCsvModal}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"xs\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">Please select date range</DialogTitle>\n                <DialogContent>\n                    <Grid container>\n                        <Grid xs={12}>\n                            <TextField\n                                fullWidth\n                                id=\"outlined-basic\"\n                                margin=\"normal\"\n                                label=\"Start date\"\n                                variant=\"outlined\"\n                                value={startDate}\n                                onChange={(e) => setStartDate(e.target.value)}\n                                type=\"date\"\n                                InputLabelProps={{ shrink: true }}\n                            />\n                            {startDateError && <span style={{ color: 'red' }}>Start Date is required</span>}\n                        </Grid>\n                        <Grid xs={12}>\n                            <TextField\n                                fullWidth\n                                id=\"outlined-basic\"\n                                margin=\"normal\"\n                                label=\"End date\"\n                                variant=\"outlined\"\n                                InputLabelProps={{ shrink: true }}\n                                type=\"date\"\n                                value={endDate}\n                                onChange={(e) => setEndDate(e.target.value)}\n                            />\n                            {endDateError && <span style={{ color: 'red' }}>End Date is required</span>}\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Stack direction=\"row\" spacing={2}>\n                        <Button color=\"error\" variant=\"outlined\" onClick={closeCsvModal}>\n                            Cancel\n                        </Button>\n\n                        <Button color=\"primary\" variant=\"outlined\" onClick={exportCsv}>\n                            Export\n                        </Button>\n\n                        <CSVLink target=\"_blank\" ref={csvButtonRef} filename=\"League_report.csv\" data={leagues} />\n                    </Stack>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import MainCard from 'ui-component/cards/MainCard';\nimport LeaguesTable from 'shared/leaguesTable';\nimport firebase from '../../frebase/firebase';\nimport { useState, useEffect } from 'react';\n\nconst columns = [\n    {\n        name: 'League Name'\n    },\n    { name: 'No. of Quizzes' },\n    {\n        name: 'Quiz Master'\n    },\n    {\n        name: 'Created By'\n    },\n    { name: 'Created On' },\n\n    {\n        name: 'Status'\n    },\n\n    {\n        name: 'Actions'\n    }\n];\n\nfunction PrivateLeagues() {\n    const [tableData, setTableData] = useState([]);\n    const [masters, setMasters] = useState([]);\n    const [index, setIndex] = useState(null);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [popType, setPopType] = useState(null);\n    const [element, setElement] = useState(null);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [length, setLength] = useState(0);\n    const [lastDoc, setLastDoc] = useState();\n    const [firstDoc, setFirstDoc] = useState();\n    const [page, setPage] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    const handleClick = (event, type, index) => {\n        setIndex(index);\n        setElement(tableData[index]);\n        // setIndex(index);\n        setPopType(type);\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n        setElement(null);\n    };\n\n    useEffect(() => {\n        getLeagues();\n        getQuizMaster();\n        // getInviteUsers();\n    }, []);\n\n    const getLeagues = async (limit = rowsPerPage) => {\n        try {\n            const ref = firebase.firestore().collection('QuizLeague');\n            ref.limit(limit)\n                .where('leagueType', '==', 'private')\n                .where('isApproved', '==', true)\n                .where('isRejected', '==', false)\n                .get()\n                .then((league) => {\n                    const leagues = league.docs.map((doc) => doc.data());\n                    const doc = league.docs[league.docs.length - 1];\n                    setLastDoc(doc);\n                    setTableData(leagues);\n                    setLoading(false);\n                });\n            const count = (await ref.where('leagueType', '==', 'public').get()).docs.length;\n            setLength(count);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n    const getQuizMaster = async () => {\n        const ref = firebase.firestore().collection('Users');\n        ref.where('userRole', '==', 'Master')\n            .get()\n            .then((user) => {\n                const master = user.docs.map((doc) => doc.data());\n\n                setMasters(master);\n            });\n    };\n\n    const unAssignQuizzMaster = () => {\n        // data[index].quizzmaster = 'Not yet';\n        // setTableData([...data]);\n        // handleClose();\n        // setIndex(null);\n        const rowData = tableData.find(function (element, ind) {\n            return ind == index;\n        });\n        const updatedData = { ...rowData, quizzmaster: '', quizzmasterId: '' };\n\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .doc(rowData.id)\n            .update(updatedData)\n            .then((user) => {\n                getLeagues();\n                handleClose();\n            });\n    };\n    const assignQuizzMaster = (assignMaster) => {\n        const rowData = tableData.find(function (element, ind) {\n            return ind == index;\n        });\n        const updatedData = { ...rowData, quizzmaster: assignMaster.username, quizzmasterId: assignMaster.uid };\n\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .doc(rowData.id)\n            .update(updatedData)\n            .then((user) => {\n                getLeagues();\n                handleClose();\n            });\n\n        // data[index].quizzmaster = name;\n        // setTableData([...data]);\n        // handleClose();\n        // setIndex(null);\n    };\n\n    const updateRow = () => {\n        const rowData = tableData.find(function (ele, ind) {\n            return ind == index;\n        });\n        // const updatedData = { ...rowData, quizzmaster: '', quizzmasterId: '' };\n\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .doc(rowData.id)\n            .update(element)\n            .then((user) => {\n                getLeagues();\n                handleClose();\n            });\n        // console.log(element);\n\n        // data[index] = element;\n        // setTableData([...data]);\n        // handleClose();\n        // setIndex(null);\n    };\n    const deteleteRow = () => {\n        const rowData = tableData.find(function (ele, ind) {\n            return ind == index;\n        });\n        const ref = firebase.firestore();\n        ref.collection('QuizLeague')\n            .doc(rowData.id)\n            .delete()\n            .then((user) => {\n                getLeagues();\n                handleClose();\n            });\n        // data.splice(index, 1);\n        // console.log(index, data);\n        // setTableData(data);\n        // handleClose();\n    };\n\n    const handleChangeRowsPerPage = async (event) => {\n        try {\n            await getLeagues(event.target.value);\n            setRowsPerPage(event.target.value);\n            setPage(0);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setLoading(true);\n        const previousPage = page;\n        setPage(newPage);\n        if (newPage > previousPage) {\n            ref.limit(rowsPerPage)\n                .startAfter(lastDoc)\n                .where('leagueType', '==', 'private')\n                .where('isApproved', '==', true)\n                .where('isRejected', '==', false)\n                .get()\n                .then((league) => {\n                    const leagues = league.docs.map((doc) => doc.data());\n                    const ldoc = league.docs[league.docs.length - 1];\n                    const fdoc = league.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setTableData(leagues);\n                    setLoading(false);\n                });\n        } else {\n            ref.limitToLast(rowsPerPage + 1)\n                .endBefore(firstDoc)\n                .where('leagueType', '==', 'private')\n                .where('isApproved', '==', true)\n                .where('isRejected', '==', false)\n                .get()\n                .then((league) => {\n                    const leagues = league.docs.map((doc) => doc.data());\n                    const ldoc = league.docs[league.docs.length - 1];\n                    const fdoc = league.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setTableData(leagues);\n                    setLoading(false);\n                });\n        }\n    };\n\n    return (\n        <MainCard title=\"Private Leagues\">\n            <LeaguesTable\n                columns={columns}\n                data={tableData}\n                setTableData={setTableData}\n                users={masters}\n                type=\"private\"\n                handleClick={handleClick}\n                setAnchorEl={setAnchorEl}\n                anchorEl={anchorEl}\n                setIndex={setIndex}\n                index={index}\n                setPopType={setPopType}\n                popType={popType}\n                unAssignQuizzMaster={unAssignQuizzMaster}\n                handleClose={handleClose}\n                assignQuizzMaster={assignQuizzMaster}\n                updateRow={updateRow}\n                setElement={setElement}\n                element={element}\n                deteleteRow={deteleteRow}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n                handleChangePage={handleChangePage}\n                rowsPerPage={rowsPerPage}\n                setLoading={setLoading}\n                page={page}\n                setPage={setPage}\n                length={length}\n            />\n        </MainCard>\n    );\n}\n\nexport default PrivateLeagues;\n"],"names":["LeaguesTable","props","data","columns","users","type","assignQuizzMaster","handleClick","anchorEl","popType","unAssignQuizzMaster","handleClose","element","setElement","updateRow","deteleteRow","inviteUsers","masters","length","handleChangeRowsPerPage","rowsPerPage","page","handleChangePage","open","getLeagues","Boolean","id","undefined","useState","userList","setUserList","React","csvModal","setCsvModal","startDate","setStartDate","endDate","setEndDate","startDateError","setStartDateError","endDateError","setEndDateError","leagues","setLeagues","invitedUserList","setInvitedUserList","navigate","useNavigate","csvButtonRef","useEffect","closeCsvModal","closePopUp","style","display","justifyContent","alignItems","component","Link","to","variant","color","disableElevation","sx","float","onClick","Paper","overflow","size","map","col","index","align","whiteSpace","width","name","row","i","scope","title","quizzes","label","createdByName","organizer","ContactInfo","firstName","moment","createdAt","fromNow","status","onClose","anchorOrigin","vertical","horizontal","padding","flexDirection","overflowY","direction","spacing","value","paddingBottom","onChange","e","target","description","container","height","item","sm","disablePortal","options","user","lastName","uid","event","newValue","renderInput","params","margin","createdBy","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","maxWidth","xs","fullWidth","InputLabelProps","shrink","unixStartDate","valueOf","unixEndDate","filter","league","quizzmaster","Status","current","link","click","error","console","log","CSVLink","ref","filename","tableData","setTableData","setMasters","setIndex","setAnchorEl","setPopType","setRowsPerPage","setLength","lastDoc","setLastDoc","firstDoc","setFirstDoc","setPage","setLoading","getQuizMaster","limit","firebase","collection","where","get","then","docs","doc","master","currentTarget","rowData","find","ind","updatedData","quizzmasterId","update","assignMaster","username","ele","delete","newPage","previousPage","startAfter","ldoc","fdoc","limitToLast","endBefore"],"sourceRoot":""}