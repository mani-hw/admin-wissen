{"version":3,"file":"static/js/275.0ff2b1d8.chunk.js","mappings":"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","sources":["views/questions/approveQuestionTable.js","views/questions/approveQuestions.js"],"sourcesContent":["import * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport {\n    Button,\n    Stack,\n    TablePagination,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    TextField\n} from '@mui/material';\nimport firebase, { fcmUrl } from '../../frebase/firebase';\nimport moment from 'moment';\nimport ConfirmDialog from '../../shared/confirmDialogue';\nimport { CSVLink } from 'react-csv';\n\nexport default function ApproveQuestionTable(props) {\n    const { data, columns, page, handleChangePage, length, setLoading, loading, handleChangeRowsPerPage, rowsPerPage } = props;\n    const ref = firebase.firestore().collection('Users');\n    const [element, setElement] = React.useState(null);\n    const [message, setMessage] = React.useState('');\n    const [showModal, setShowModal] = React.useState(false);\n    const [csvModal, setCsvModal] = React.useState(false);\n    const [startDate, setStartDate] = React.useState('');\n    const [endDate, setEndDate] = React.useState('');\n    const [startDateError, setStartDateError] = React.useState('');\n    const [endDateError, setEndDateError] = React.useState('');\n    const [questions, setQuestions] = React.useState([]);\n    const [users, setUsers] = React.useState([]);\n    const csvButtonRef = React.useRef();\n\n    const exportCsv = () => {\n        try {\n            if (startDate.length === 0) {\n                setStartDateError(true);\n                return;\n            }\n            if (endDate.length === 0) {\n                setEndDateError(true);\n                return;\n            }\n            const unixStartDate = moment(startDate).valueOf();\n            const unixEndDate = moment(endDate).valueOf();\n            const questions = data\n                .filter((question) => question.createdAt >= unixStartDate && question.createdAt <= unixEndDate)\n                .map((question) => ({\n                    Question: question.title,\n                    Level: question.level,\n                    Type: question.type,\n                    Topic: question.genre,\n                    'Created By': `${question?.createdBy.firstName} ${question?.createdBy.lastName}`,\n                    'Created On': moment(question?.createdAt).fromNow()\n                }));\n            setQuestions(questions);\n            csvButtonRef.current.link.click()\n            closeCsvModal();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const closeCsvModal = () => {\n        setStartDate('');\n        setEndDate('');\n        setStartDateError(false);\n        setEndDateError(false);\n        setCsvModal(false);\n    };\n\n    const openModal = (mode, row) => {\n        setElement(row);\n        if (mode === 'approve') setMessage('Are you sure to approve this question?');\n        else setMessage('Are you sure to reject this question?');\n        setShowModal(true);\n    };\n\n    const closeModal = () => {\n        setShowModal(false);\n        setMessage('');\n        setElement(null);\n    };\n\n    const confirmHandler = async () => {\n        try {\n            if (message === \"Are you sure to reject this question?\") {\n\n                setLoading(true);\n                await firebase.firestore().collection(\"QuestionBank\").doc(element.id).update({ isApproved: false }, { merge: true });\n                await fetch(fcmUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization:\n                            'key=AAAAeu1JEGQ:APA91bE9xZmc_aTJj8V2iLrtlNbUyYjrQBPR7gMRUL2ALc6ISVv0G5wfW5GBLtt-JQWXYpmmmV_SQzo9MNDoSWEGHvIeRJgSrSFGjhdk_5PEgR09Zgzdv7KarnF4B_Wj9WbvvJTzHqUj'\n                    },\n                    body: JSON.stringify({\n                        notification: {\n                            title: 'Question Approval',\n                            body: 'Your question is not approved.'\n                        },\n                        to: element.createdBy.fcmToken\n                    })\n                });\n                const id = moment().fromNow();\n                const notificationObj = {\n                    createdAt: id,\n                    dec: 'Your question is not approved.',\n                    title: 'Question Approval',\n                    from: 'admin',\n                    isClicked: false,\n                    isNotificationSend: true,\n                    recipientUid: element.createdBy.uid,\n                    to: 'Master',\n                    type: 'questionApproval',\n                    id: id.toString()\n                };\n                await firebase.firestore().collection('Notification').doc(notificationObj.id).set(notificationObj);\n                setLoading(false)\n                closeModal();\n            } else {\n                setLoading(true);\n                await firebase.firestore().collection(\"QuestionBank\").doc(element.id).update({ isApproved: true }, { merge: true });\n                await fetch(fcmUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization:\n                            'key=AAAAeu1JEGQ:APA91bE9xZmc_aTJj8V2iLrtlNbUyYjrQBPR7gMRUL2ALc6ISVv0G5wfW5GBLtt-JQWXYpmmmV_SQzo9MNDoSWEGHvIeRJgSrSFGjhdk_5PEgR09Zgzdv7KarnF4B_Wj9WbvvJTzHqUj'\n                    },\n                    body: JSON.stringify({\n                        notification: {\n                            title: 'Question Approval',\n                            body: 'Your question is approved successfully.'\n                        },\n                        to: element.createdBy.fcmToken\n                    })\n                });\n                const id = moment().fromNow();\n                const notificationObj = {\n                    createdAt: id,\n                    dec: 'Your question is approved successfully.',\n                    title: 'Question Approval',\n                    from: 'admin',\n                    isClicked: false,\n                    isNotificationSend: true,\n                    recipientUid: element.createdBy.uid,\n                    to: 'Master',\n                    type: 'questionApproval',\n                    id: id.toString()\n                };\n                await firebase.firestore().collection('Notification').doc(notificationObj.id).set(notificationObj);\n                setLoading(false)\n                closeModal();\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n\n\n\n\n\n    const getUsers = async () => {\n        try {\n            const users = (await firebase.firestore().collection('Users').get()).docs.map((doc) => doc.data());\n            setUsers(users);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    React.useEffect(() => {\n        getUsers();\n    }, []);\n    return (\n        <>\n            <div>\n                <div>\n                    <Button variant=\"outlined\" color=\"info\" sx={{ float: 'right' }} onClick={() => setCsvModal(true)}>\n                        Export\n                    </Button>\n                </div>\n\n                {loading && (\n                    <div style={{ marginLeft: '30rem', marginTop: '8rem', position: 'absolute' }}>\n                        <CircularProgress style={{ position: 'absolute' }} />\n                    </div>\n                )}\n                <Paper>\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\" sx={{ minWidth: 650 }} size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((col, index) => (\n                                        <TableCell align=\"center\" key={index} style={{ whiteSpace: 'nowrap' }}>\n                                            {col.name}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((row) => {\n                                    return (\n                                        <TableRow key={row?.uid}>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {row?.Question}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {row?.level}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {row?.type}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {`${row?.createdBy.firstName} ${row?.createdBy.lastName}`}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {row?.Genre}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                {moment(row?.createdAt).fromNow()}\n                                            </TableCell>\n                                            <TableCell component=\"td\" align=\"center\">\n                                                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\n                                                    <Button variant=\"outlined\" size=\"small\" onClick={() => openModal('approve', row)}>\n                                                        Approve\n                                                    </Button>\n                                                    <Button\n                                                        variant=\"outlined\"\n                                                        size=\"small\"\n                                                        color=\"error\"\n                                                        style={{ marginleft: '20px' }}\n                                                        onClick={() => openModal('reject', row)}\n                                                    >\n                                                        Reject\n                                                    </Button>\n                                                </Stack>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    <TablePagination\n                        rowsPerPageOptions={[10, 25]}\n                        component=\"div\"\n                        count={length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </div>\n            {/* csv dialogue */}\n\n            <Dialog\n                open={csvModal}\n                onClose={closeCsvModal}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                maxWidth=\"xs\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">Please select date range</DialogTitle>\n                <DialogContent>\n                    <Grid container>\n                        <Grid xs={12}>\n                            <TextField\n                                fullWidth\n                                id=\"outlined-basic\"\n                                margin=\"normal\"\n                                label=\"Start date\"\n                                variant=\"outlined\"\n                                value={startDate}\n                                onChange={(e) => setStartDate(e.target.value)}\n                                type=\"date\"\n                                InputLabelProps={{ shrink: true }}\n                            />\n                            {startDateError && <span style={{ color: 'red' }}>Start Date is required</span>}\n                        </Grid>\n                        <Grid xs={12}>\n                            <TextField\n                                fullWidth\n                                id=\"outlined-basic\"\n                                margin=\"normal\"\n                                label=\"End date\"\n                                variant=\"outlined\"\n                                InputLabelProps={{ shrink: true }}\n                                type=\"date\"\n                                value={endDate}\n                                onChange={(e) => setEndDate(e.target.value)}\n                            />\n                            {endDateError && <span style={{ color: 'red' }}>End Date is required</span>}\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Stack direction=\"row\" spacing={2}>\n                        <Button color=\"error\" variant=\"outlined\" onClick={closeCsvModal}>\n                            Cancel\n                        </Button>\n\n                        <Button color=\"primary\" variant=\"outlined\" onClick={exportCsv}>\n                            Export\n                        </Button>\n                        <CSVLink\n                            target='_blank'\n                            filename=\"User_report.csv\"\n                            data={questions}\n                            ref={csvButtonRef}\n                        />\n                    </Stack>\n                </DialogActions>\n            </Dialog>\n\n            <ConfirmDialog open={showModal} confirmHandler={confirmHandler} cancelHandler={closeModal} message={message} />\n        </>\n    );\n}\n","import MainCard from 'ui-component/cards/MainCard';\nimport { useState } from 'react';\nimport ApproveQuestionTable from './approveQuestionTable';\nimport firebase from '../../frebase/firebase';\nimport { useEffect } from 'react';\n\nconst columns = [\n    {\n        name: 'Question'\n    },\n    {\n        name: 'Level'\n    },\n    {\n        name: 'Type'\n    },\n    {\n        name: 'Created By'\n    },\n    {\n        name: 'Topic'\n    },\n    {\n        name: 'Created On'\n    },\n    {\n        name: 'Actions'\n    }\n];\n\nfunction ApprovedQuestions() {\n    const [tableData, setTableData] = useState([]);\n    const [lastDoc, setLastDoc] = useState();\n    const [firstDoc, setFirstDoc] = useState();\n    const [page, setPage] = useState(0);\n    const [length, setLength] = useState(0);\n    const [loading, setLoading] = useState(false);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const ref = firebase.firestore().collection('QuestionBank');\n    const getQuestions = async (limit = rowsPerPage) => {\n        setLoading(true);\n        const userRef = firebase.firestore().collection('Users');\n        const usersdocs = await userRef.get();\n        const users = usersdocs.docs.map((doc) => doc.data());\n        ref.orderBy('createdAt', 'desc')\n            .limit(limit)\n            .get()\n            .then((question) => {\n                const questions = question.docs.map((doc) => doc.data());\n                const doc = question.docs[question.docs.length - 1];\n                const allQuestions = questions.map((questionitem) => {\n                    if (!questionitem.createdBy) {\n                        return { ...questionitem, createdBy: null };\n                    } else {\n                        const filterdUser = users.filter((userItem) => userItem.uid === questionitem.createdBy);\n                        if (filterdUser.length === 0) {\n                            return { ...questionitem, createdBy: null };\n                        } else {\n                            return { ...questionitem, createdBy: filterdUser[0] };\n                        }\n                    }\n                });\n                const filteredQuestions = allQuestions.filter((question) => question?.createdBy?.userRole === 'Master' && !question.isApproved);\n                setTableData(filteredQuestions);\n                setLastDoc(doc);\n                setLoading(false);\n            });\n        const count = (await ref.where('isBlocked', '==', false).get()).docs.length;\n        setLength(count);\n    };\n\n    const handleChangeRowsPerPage = async (event) => {\n        try {\n            await getUsers(event.target.value);\n            setRowsPerPage(event.target.value);\n            setPage(0);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setLoading(true);\n        const previousPage = page;\n        setPage(newPage);\n        if (newPage > previousPage) {\n            ref.orderBy('createdAt', 'desc')\n                .limit(rowsPerPage)\n                .startAfter(lastDoc)\n                .where('isBlocked', '==', false)\n                .get()\n                .then((user) => {\n                    const users = user.docs.map((doc) => doc.data());\n                    const ldoc = user.docs[user.docs.length - 1];\n                    const fdoc = user.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n\n                    setTableData(users);\n                    setLoading(false);\n                });\n        } else {\n            ref.orderBy('createdAt', 'desc')\n                .limitToLast(rowsPerPage + 1)\n                .endBefore(firstDoc)\n                .where('isBlocked', '==', false)\n                .get()\n                .then((user) => {\n                    const users = user.docs.map((doc) => doc.data());\n                    const ldoc = user.docs[user.docs.length - 1];\n                    const fdoc = user.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setTableData(users);\n                    setLoading(false);\n                });\n        }\n    };\n\n    useEffect(() => {\n        getQuestions();\n    }, []);\n    return (\n        <MainCard title=\"Approved Questions\">\n            <ApproveQuestionTable\n                columns={columns}\n                data={tableData && tableData}\n                setTableData={setTableData}\n                type=\"Active\"\n                page={page}\n                setPage={setPage}\n                handleChangePage={handleChangePage}\n                length={length}\n                setLoading={setLoading}\n                rowsPerPage={rowsPerPage}\n                loading={loading}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n}\n\nexport default ApprovedQuestions;\n"],"names":["ApproveQuestionTable","props","data","columns","page","handleChangePage","length","setLoading","loading","handleChangeRowsPerPage","rowsPerPage","firebase","collection","React","element","setElement","message","setMessage","showModal","setShowModal","csvModal","setCsvModal","startDate","setStartDate","endDate","setEndDate","startDateError","setStartDateError","endDateError","setEndDateError","questions","setQuestions","setUsers","csvButtonRef","closeCsvModal","openModal","mode","row","closeModal","confirmHandler","doc","id","update","isApproved","merge","fetch","fcmUrl","method","headers","Authorization","body","JSON","stringify","notification","title","to","createdBy","fcmToken","moment","fromNow","notificationObj","createdAt","dec","from","isClicked","isNotificationSend","recipientUid","uid","type","toString","set","console","log","getUsers","get","users","docs","map","Button","variant","color","sx","float","onClick","style","marginLeft","marginTop","position","CircularProgress","Paper","TableContainer","component","Table","minWidth","size","TableHead","TableRow","col","index","TableCell","align","whiteSpace","name","TableBody","Question","level","firstName","lastName","Genre","Stack","direction","alignItems","justifyContent","spacing","marginleft","TablePagination","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","Dialog","open","onClose","maxWidth","DialogTitle","DialogContent","Grid","container","xs","TextField","fullWidth","margin","label","value","onChange","e","target","InputLabelProps","shrink","DialogActions","unixStartDate","valueOf","unixEndDate","filter","question","Level","Type","Topic","genre","current","link","click","error","CSVLink","filename","ref","cancelHandler","useState","tableData","setTableData","lastDoc","setLastDoc","firstDoc","setFirstDoc","setPage","setLength","setRowsPerPage","getQuestions","limit","userRef","usersdocs","orderBy","then","filteredQuestions","questionitem","filterdUser","userItem","userRole","where","event","useEffect","MainCard","newPage","previousPage","startAfter","user","ldoc","fdoc","limitToLast","endBefore"],"sourceRoot":""}