{"version":3,"file":"static/js/995.4e5e2e0a.chunk.js","mappings":"8TAUe,SAASA,EAAcC,GAClC,IAAQC,EAA0GD,EAA1GC,KAAMC,EAAoGF,EAApGE,QAASC,EAA2FH,EAA3FG,KAAeC,GAA4EJ,EAArFK,QAAqFL,EAA5EI,kBAAkBE,EAA0DN,EAA1DM,YAAaC,EAA6CP,EAA7CO,wBAAyBC,EAAoBR,EAApBQ,OAAQC,EAAYT,EAAZS,QAEtG,OACI,2BACKA,IACG,gBAAKC,MAAO,CAAEC,WAAY,QAASC,UAAW,OAAQC,SAAU,YAAa,UACzE,SAACC,EAAA,EAAgB,CAACJ,MAAO,CAAEG,SAAU,iBAI7C,UAACE,EAAA,EAAK,CAACL,MAAO,CAAEM,SAAU,QAAS,WAC/B,SAACC,EAAA,EAAc,CAACP,MAAO,CAAEQ,MAAO,UAAYC,UAAWJ,EAAAA,EAAM,UACzD,UAACK,EAAA,EAAK,CAAC,aAAW,eAAc,WAC5B,SAACC,EAAA,EAAS,WACN,SAACC,EAAA,EAAQ,UACJpB,EAAQqB,KAAI,SAACC,GAAG,OACb,SAACC,EAAA,EAAS,CAACC,MAAM,OAAM,SAAEF,EAAIG,MAAiB,SAI1D,SAACC,EAAA,EAAS,UACD,OAAJ3B,QAAI,IAAJA,OAAI,EAAJA,EAAMsB,KAAI,SAACM,GACR,OACI,UAACP,EAAA,EAAQ,YACL,SAACG,EAAA,EAAS,CAACN,UAAU,KAAKO,MAAM,OAAM,SAC9B,OAAHG,QAAG,IAAHA,OAAG,EAAHA,EAAKC,YAEV,SAACL,EAAA,EAAS,CAACN,UAAU,KAAKO,MAAM,OAAM,UAC9B,OAAHG,QAAG,IAAHA,OAAG,EAAHA,EAAKE,WAAWvB,QAAS,EACpBqB,EAAIE,WAAWR,KAAI,SAACS,GAEhB,OADAC,QAAQC,IAAI,iBAAkBF,IAE1B,gBAAKtB,MAAO,CAAEyB,QAAS,OAAQC,cAAe,UAAW,UACrD,cAAGC,KAAML,EAAMM,OAAO,SAAQ,UAC1B,gBACI5B,MAAO,CAAE6B,OAAQ,IAAKrB,MAAO,IAAKsB,UAAW,SAC7CC,IAAKT,EACLU,IAAI,gBAKxB,IACA,oBApBI,OAAHb,QAAG,IAAHA,OAAG,EAAHA,EAAKc,IAwB5B,YAIZ,gBAAKjC,MAAO,CAAEQ,MAAO,UAAW,UAC5B,SAAC0B,EAAA,EAAe,CACZC,mBAAoB,CAAC,GAAI,IACzB1B,UAAU,MACV2B,MAAOtC,EACPF,YAAaA,EACbH,KAAMA,EACN4C,aAAc3C,EACd4C,oBAAqBzC,WAM7C,C,wBC4BA,EAnGiB,WACb,OAAwB0C,EAAAA,EAAAA,UAAS,MAAK,eAA/BhD,EAAI,KAAEiD,EAAO,KACpB,GAA8BD,EAAAA,EAAAA,YAAU,eAAjCE,EAAO,KAAEC,EAAU,KAC1B,GAAgCH,EAAAA,EAAAA,YAAU,eAAnCI,EAAQ,KAAEC,EAAW,KAC5B,GAA8BL,EAAAA,EAAAA,WAAS,GAAK,eAArCxC,EAAO,KAAE8C,EAAU,KAC1B,GAAwBN,EAAAA,EAAAA,UAAS,GAAE,eAA5B9C,EAAI,KAAEE,EAAO,KACpB,GAAsC4C,EAAAA,EAAAA,UAAS,IAAG,eAA3C3C,EAAW,KAAEkD,EAAc,KAClC,GAA4BP,EAAAA,EAAAA,UAAS,GAAE,eAAhCzC,EAAM,KAAEiD,EAAS,KAClBC,EAAMC,EAAAA,GAAAA,YAAqBC,WAAW,YACtCC,EAAW,mCAAG,kGAWT,OAXgBC,EAAK,+BAAGxD,EAC/BiD,GAAW,GACXG,EAAIK,QAAQ,MAAO,QACdD,MAAMA,GACNE,MACAC,MAAK,SAACC,GACH,IAAMC,EAAYD,EAAGE,KAAK7C,KAAI,SAAC8C,GAAG,OAAKA,EAAIpE,MAAM,IAC3CoE,EAAMH,EAAGE,KAAKF,EAAGE,KAAK5D,OAAS,GACrC4C,EAAWiB,GACXnB,EAAQiB,GACRZ,GAAW,EACf,IAAG,SACcG,EAAIM,MAAK,OAAxBlB,EAAK,OAAqBsB,KAAK5D,OACrCiD,EAAUX,GAAO,2CACpB,kBAdgB,mCA4DXvC,EAAuB,mCAAG,WAAO+D,GAAK,0FAE9BT,EAAYS,EAAMhC,OAAOiC,OAAO,KAAD,EACrCf,EAAec,EAAMhC,OAAOiC,OAC5BlE,EAAQ,GAAG,gDAEX4B,QAAQC,IAAI,EAAD,IAAM,yDAExB,gBAR4B,sCAa7B,OAHAsC,EAAAA,EAAAA,YAAU,WACNX,GACJ,GAAG,KAEC,SAACY,EAAA,EAAQ,CAACC,MAAM,WAAU,UACtB,SAAC3E,EAAa,CACVE,KAAMA,EACNC,QA7DI,CACZ,CACIyB,KAAM,YAEV,CACIA,KAAM,eAyDFxB,KAAMA,EACNE,QAASA,EACTD,iBAvDa,SAACkE,EAAOK,GAC7BpB,GAAW,GACX,IAAMqB,EAAezE,EACrBE,EAAQsE,GACJA,EAAUC,EACVlB,EAAIK,QAAQ,MAAO,QACdD,MAAMxD,GACNuE,WAAW1B,GACXa,MACAC,MAAK,SAACC,GACH,IAAMC,EAAYD,EAAGE,KAAK7C,KAAI,SAAC8C,GAAG,OAAKA,EAAIpE,MAAM,IAC3C6E,EAAOZ,EAAGE,KAAKF,EAAGE,KAAK5D,OAAS,GAChCuE,EAAOb,EAAGE,KAAK,GACrBd,EAAYyB,GACZ3B,EAAW0B,GACX5B,EAAQiB,GACRZ,GAAW,EACf,IAEJG,EAAIK,QAAQ,MAAO,QACdiB,YAAY1E,EAAc,GAC1B2E,UAAU5B,GACVW,MACAC,MAAK,SAACC,GACH,IAAMC,EAAYD,EAAGE,KAAK7C,KAAI,SAAC8C,GAAG,OAAKA,EAAIpE,MAAM,IAC3C6E,EAAOZ,EAAGE,KAAKF,EAAGE,KAAK5D,OAAS,GAChCuE,EAAOb,EAAGE,KAAK,GACrBd,EAAYyB,GACZ3B,EAAW0B,GACX5B,EAAQiB,GACRZ,GAAW,EACf,GAEZ,EAuBY/C,OAAQA,EACR+C,WAAYA,EACZ9C,QAASA,EACTH,YAAaA,EACbC,wBAAyBA,KAIzC,C","sources":["shared/feedbackTable.js","views/feedback/index.js"],"sourcesContent":["import * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { CircularProgress, TablePagination } from '@mui/material';\n\nexport default function FeedbackTable(props) {\n    const { data, columns, page, setPage, handleChangePage, rowsPerPage, handleChangeRowsPerPage, length, loading } = props;\n\n    return (\n        <div>\n            {loading && (\n                <div style={{ marginLeft: '30rem', marginTop: '8rem', position: 'absolute' }}>\n                    <CircularProgress style={{ position: 'absolute' }} />\n                </div>\n            )}\n\n            <Paper style={{ overflow: 'auto' }}>\n                <TableContainer style={{ width: '1100px' }} component={Paper}>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((col) => (\n                                    <TableCell align=\"left\">{col.name}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {data?.map((row) => {\n                                return (\n                                    <TableRow key={row?.fid}>\n                                        <TableCell component=\"td\" align=\"left\">\n                                            {row?.feedback}\n                                        </TableCell>\n                                        <TableCell component=\"td\" align=\"left\">\n                                            {row?.screenshot.length > 0\n                                                ? row.screenshot.map((link) => {\n                                                      console.log('jhsdhjdshjdshj', link);\n                                                      return (\n                                                          <div style={{ display: 'flex', flexDirection: 'column' }}>\n                                                              <a href={link} target=\"_blank\">\n                                                                  <img\n                                                                      style={{ height: 200, width: 200, objectFit: 'cover' }}\n                                                                      src={link}\n                                                                      alt=\"feedback\"\n                                                                  />\n                                                              </a>\n                                                          </div>\n                                                      );\n                                                  })\n                                                : 'No Attachment'}\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <div style={{ width: '1100px' }}>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 25]}\n                        component=\"div\"\n                        count={length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                </div>\n            </Paper>\n        </div>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport FeedbackTable from 'shared/feedbackTable';\nimport MainCard from 'ui-component/cards/MainCard';\nimport firebase from '../../frebase/firebase';\n\nconst Feedback = () => {\n    const [data, setData] = useState(null);\n    const [lastDoc, setLastDoc] = useState();\n    const [firstDoc, setFirstDoc] = useState();\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [length, setLength] = useState(0);\n    const ref = firebase.firestore().collection('Feedback');\n    const getFeedback = async (limit = rowsPerPage) => {\n        setLoading(true);\n        ref.orderBy('fid', 'desc')\n            .limit(limit)\n            .get()\n            .then((fb) => {\n                const feedbacks = fb.docs.map((doc) => doc.data());\n                const doc = fb.docs[fb.docs.length - 1];\n                setLastDoc(doc);\n                setData(feedbacks);\n                setLoading(false);\n            });\n        const count = (await ref.get()).docs.length;\n        setLength(count);\n    };\n\n    const columns = [\n        {\n            name: 'Feedback'\n        },\n        {\n            name: 'Attachment'\n        }\n    ];\n\n    const handleChangePage = (event, newPage) => {\n        setLoading(true);\n        const previousPage = page;\n        setPage(newPage);\n        if (newPage > previousPage) {\n            ref.orderBy('fid', 'desc')\n                .limit(rowsPerPage)\n                .startAfter(lastDoc)\n                .get()\n                .then((fb) => {\n                    const feedbacks = fb.docs.map((doc) => doc.data());\n                    const ldoc = fb.docs[fb.docs.length - 1];\n                    const fdoc = fb.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setData(feedbacks);\n                    setLoading(false);\n                });\n        } else {\n            ref.orderBy('fid', 'desc')\n                .limitToLast(rowsPerPage + 1)\n                .endBefore(firstDoc)\n                .get()\n                .then((fb) => {\n                    const feedbacks = fb.docs.map((doc) => doc.data());\n                    const ldoc = fb.docs[fb.docs.length - 1];\n                    const fdoc = fb.docs[0];\n                    setFirstDoc(fdoc);\n                    setLastDoc(ldoc);\n                    setData(feedbacks);\n                    setLoading(false);\n                });\n        }\n    };\n\n    const handleChangeRowsPerPage = async (event) => {\n        try {\n            await getFeedback(event.target.value);\n            setRowsPerPage(event.target.value);\n            setPage(0);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        getFeedback();\n    }, []);\n    return (\n        <MainCard title=\"Feedback\">\n            <FeedbackTable\n                data={data}\n                columns={columns}\n                page={page}\n                setPage={setPage}\n                handleChangePage={handleChangePage}\n                length={length}\n                setLoading={setLoading}\n                loading={loading}\n                rowsPerPage={rowsPerPage}\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\nexport default Feedback;\n"],"names":["FeedbackTable","props","data","columns","page","handleChangePage","setPage","rowsPerPage","handleChangeRowsPerPage","length","loading","style","marginLeft","marginTop","position","CircularProgress","Paper","overflow","TableContainer","width","component","Table","TableHead","TableRow","map","col","TableCell","align","name","TableBody","row","feedback","screenshot","link","console","log","display","flexDirection","href","target","height","objectFit","src","alt","fid","TablePagination","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","useState","setData","lastDoc","setLastDoc","firstDoc","setFirstDoc","setLoading","setRowsPerPage","setLength","ref","firebase","collection","getFeedback","limit","orderBy","get","then","fb","feedbacks","docs","doc","event","value","useEffect","MainCard","title","newPage","previousPage","startAfter","ldoc","fdoc","limitToLast","endBefore"],"sourceRoot":""}